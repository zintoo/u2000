/* A Bison parser, made from ../../../../../src/tool/omniidl/cxx/idl.yy
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	IDENTIFIER	257
# define	ABSTRACT	258
# define	ANY	259
# define	ATTRIBUTE	260
# define	BOOLEAN	261
# define	CASE	262
# define	CHAR	263
# define	CONST	264
# define	CONTEXT	265
# define	CUSTOM	266
# define	DEFAULT	267
# define	DOUBLE	268
# define	ENUM	269
# define	EXCEPTION	270
# define	FACTORY	271
# define	FALSE_	272
# define	FIXED	273
# define	FLOAT	274
# define	IN	275
# define	INOUT	276
# define	INTERFACE	277
# define	LOCAL	278
# define	LONG	279
# define	MODULE	280
# define	NATIVE	281
# define	OBJECT	282
# define	OCTET	283
# define	ONEWAY	284
# define	OUT	285
# define	PRIVATE	286
# define	PUBLIC	287
# define	RAISES	288
# define	READONLY	289
# define	SEQUENCE	290
# define	SHORT	291
# define	STRING	292
# define	STRUCT	293
# define	SUPPORTS	294
# define	SWITCH	295
# define	TRUE_	296
# define	TRUNCATABLE	297
# define	TYPEDEF	298
# define	UNION	299
# define	UNSIGNED	300
# define	VALUEBASE	301
# define	VALUETYPE	302
# define	VOID	303
# define	WCHAR	304
# define	WSTRING	305
# define	PRAGMA	306
# define	PRAGMA_PREFIX	307
# define	PRAGMA_ID	308
# define	PRAGMA_VERSION	309
# define	OMNI_PRAGMA	310
# define	END_PRAGMA	311
# define	UNKNOWN_PRAGMA_BODY	312
# define	INTEGER_LITERAL	313
# define	CHARACTER_LITERAL	314
# define	WIDE_CHARACTER_LITERAL	315
# define	FLOATING_PT_LITERAL	316
# define	STRING_LITERAL	317
# define	WIDE_STRING_LITERAL	318
# define	FIXED_PT_LITERAL	319
# define	SCOPE_DELIM	320
# define	LEFT_SHIFT	321
# define	RIGHT_SHIFT	322

#line 97 "../../../../../src/tool/omniidl/cxx/idl.yy"


#include <stdlib.h>
#include <string.h>

#include <idlutil.h>
#include <idlerr.h>
#include <idlrepoId.h>
#include <idlscope.h>
#include <idltype.h>
#include <idlexpr.h>
#include <idlast.h>

#define YYDEBUG 1

// Globals from lexer
extern int         yylineno;
extern char*       currentFile;
extern IDL_Boolean mainFile;

void yyerror(char *s) {
}
extern int yylex();

// Nasty hack for abstract valuetypes
ValueAbs* valueabs_hack = 0;

#ifdef __VMS
/*  Apparently, __ALLOCA is defined for some versions of the C (but not C++)
    compiler on VAX. */
#if defined(__ALPHA) || defined(__DECC) && __DECC_VER >= 60000000
#include <builtins.h>
#define alloca __ALLOCA
#else
#define alloca malloc
#endif
#endif


#line 137 "../../../../../src/tool/omniidl/cxx/idl.yy"
#ifndef YYSTYPE
typedef union {
  char*                    id_val;
  int                      int_val;
  IDL_ULong                ulong_val;
  IdlIntLiteral            int_literal_val;
#ifndef __VMS
  IdlFloatLiteral          float_literal_val;
#else
  double                   float_literal_val;
#endif
  char                     char_val;
  char*                    string_val;
  IDL_WChar                wchar_val;
  IDL_WChar*               wstring_val;
  IDL_Boolean              boolean_val;
  IDL_Fixed*               fixed_val;
  IdlType*                 type_val;
  TypeSpec*                type_spec_val;
  IdlExpr*                 expr_val;
  ScopedName*              scopedname_val;
  Decl*                    decl_val;
  Module*                  module_val;
  Interface*               interface_val;
  InheritSpec*             inheritspec_val;
  Forward*                 forward_val;
  Const*                   const_val;
  Typedef*                 typedef_val;
  Struct*                  struct_val;
  Exception*               exception_val;
  Member*                  member_val;
  Declarator*              declarator_val;
  Union*                   union_val;
  UnionCase*               union_case_val;
  CaseLabel*               case_label_val;
  ValueBase*               value_base_val;
  Value*                   value_val;
  ValueForward*            value_forward_val;
  ValueBox*                value_box_val;
  ValueAbs*                value_abs_val;
  ValueInheritSpec*        valueinheritspec_val;
  ValueInheritSupportSpec* valueinheritsupportspec_val;
  StateMember*             statemember_val;
  Factory*                 factory_val;
  Enumerator*              enumerator_val;
  Enum*                    enum_val;
  ArraySize*               array_size_val;
  Attribute*               attribute_val;
  Operation*               operation_val;
  Parameter*               parameter_val;
  RaisesSpec*              raisesspec_val;
  ContextSpec*             contextspec_val;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		508
#define	YYFLAG		-32768
#define	YYNTBASE	91

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 322 ? yytranslate[x] : 238)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,    84,    79,     2,
      74,    75,    82,    80,    73,    81,    90,    83,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    72,    69,
      86,    76,    87,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    88,     2,    89,    78,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    70,    77,    71,    85,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     3,     5,     8,    11,    14,    17,    20,
      23,    26,    28,    30,    32,    38,    39,    46,    49,    52,
      54,    56,    61,    62,    69,    72,    76,    82,    83,    85,
      87,    89,    90,    93,    96,    99,   102,   105,   108,   110,
     112,   113,   115,   118,   121,   127,   129,   131,   133,   136,
     140,   142,   144,   146,   148,   151,   155,   159,   160,   168,
     169,   178,   180,   185,   189,   194,   197,   201,   206,   209,
     212,   215,   216,   218,   220,   224,   226,   227,   230,   232,
     234,   236,   241,   243,   245,   246,   254,   255,   262,   265,
     266,   268,   270,   274,   278,   284,   286,   288,   290,   292,
     294,   296,   298,   300,   302,   304,   306,   308,   312,   314,
     318,   320,   324,   326,   330,   334,   336,   340,   344,   346,
     350,   354,   358,   361,   363,   365,   367,   369,   371,   373,
     377,   379,   381,   383,   385,   387,   389,   391,   393,   395,
     398,   400,   403,   405,   407,   409,   412,   414,   416,   418,
     421,   423,   426,   428,   430,   432,   434,   436,   438,   440,
     442,   444,   446,   448,   450,   452,   454,   456,   458,   460,
     462,   464,   466,   468,   471,   477,   479,   481,   483,   485,
     487,   489,   492,   494,   496,   498,   500,   502,   504,   506,
     509,   511,   513,   515,   518,   521,   525,   527,   529,   531,
     533,   535,   537,   544,   547,   550,   553,   557,   561,   563,
     577,   580,   583,   585,   587,   589,   591,   593,   595,   598,
     602,   606,   608,   611,   616,   620,   623,   630,   633,   636,
     639,   645,   647,   654,   659,   664,   666,   671,   673,   676,
     678,   681,   685,   690,   691,   693,   696,   702,   709,   712,
     715,   716,   719,   720,   728,   731,   735,   736,   738,   740,
     742,   744,   749,   753,   757,   760,   766,   770,   772,   774,
     776,   777,   780,   785,   788,   794,   795,   798,   803,   806,
     812,   814,   816,   818,   820,   827,   829,   831,   834,   837,
     839,   841,   843,   845,   847,   850,   851,   853,   857,   860,
     865,   869,   876,   880,   884,   888,   890
};
static const short yyrhs[] =
{
      -1,    92,     0,    93,     0,    92,    93,     0,   152,    69,
       0,   135,    69,     0,   205,    69,     0,    97,    69,     0,
      94,    69,     0,   111,    69,     0,   229,     0,   232,     0,
       1,     0,    96,   231,    70,    92,    71,     0,     0,    96,
       1,    95,    70,    92,    71,     0,    96,     1,     0,    26,
       3,     0,    98,     0,   100,     0,   101,    70,   103,    71,
       0,     0,   101,     1,    99,    70,   103,    71,     0,   101,
       1,     0,   102,    23,     3,     0,   102,    23,     3,   231,
     106,     0,     0,     4,     0,    24,     0,   104,     0,     0,
     104,   105,     0,   152,    69,     0,   135,    69,     0,   205,
      69,     0,   202,    69,     0,   208,    69,     0,   229,     0,
       1,     0,     0,   107,     0,    72,   108,     0,   109,   231,
       0,   108,    73,   231,   109,   231,     0,     1,     0,   110,
       0,     3,     0,    66,     3,     0,   110,    66,     3,     0,
     117,     0,   114,     0,   113,     0,   112,     0,    48,     3,
       0,     4,    48,     3,     0,    48,     3,   154,     0,     0,
       4,    48,     3,   115,    70,   104,    71,     0,     0,     4,
      48,     3,   119,   116,    70,   104,    71,     0,     1,     0,
     118,    70,   124,    71,     0,    48,     3,   119,     0,    12,
      48,     3,   119,     0,    48,     3,     0,    12,    48,     3,
       0,    72,   120,    40,   108,     0,    72,   120,     0,    40,
     108,     0,   121,   122,     0,     0,    43,     0,   123,     0,
     122,    73,   123,     0,   110,     0,     0,   124,   125,     0,
     105,     0,   126,     0,   128,     0,   127,   154,   159,    69,
       0,    33,     0,    32,     0,     0,   131,    74,   132,    75,
     129,   218,    69,     0,     0,   131,    74,     1,    75,   130,
      69,     0,    17,     3,     0,     0,   133,     0,   134,     0,
     133,    73,   134,     0,    21,   224,     3,     0,    10,   136,
       3,    76,   137,     0,   164,     0,   173,     0,   174,     0,
     175,     0,   163,     0,   197,     0,   198,     0,   226,     0,
     110,     0,   176,     0,   138,     0,   139,     0,   138,    77,
     139,     0,   140,     0,   139,    78,   140,     0,   141,     0,
     140,    79,   141,     0,   142,     0,   141,    68,   142,     0,
     141,    67,   142,     0,   143,     0,   142,    80,   143,     0,
     142,    81,   143,     0,   144,     0,   143,    82,   144,     0,
     143,    83,   144,     0,   143,    84,   144,     0,   145,   146,
       0,   146,     0,    81,     0,    80,     0,    85,     0,   110,
       0,   147,     0,    74,   137,    75,     0,    59,     0,   148,
       0,   149,     0,    60,     0,    61,     0,    65,     0,    62,
       0,   150,     0,    63,     0,   148,    63,     0,    64,     0,
     149,    64,     0,    42,     0,    18,     0,   137,     0,    44,
     153,     0,   179,     0,   183,     0,   192,     0,    27,     3,
       0,   228,     0,   154,   159,     0,   155,     0,   158,     0,
     156,     0,   157,     0,   110,     0,   163,     0,   164,     0,
     173,     0,   174,     0,   175,     0,   176,     0,   177,     0,
     178,     0,   227,     0,   196,     0,   197,     0,   198,     0,
     225,     0,   179,     0,   183,     0,   192,     0,   160,   231,
       0,   159,    73,   231,   160,   231,     0,   161,     0,   162,
       0,     3,     0,   199,     0,    20,     0,    14,     0,    25,
      14,     0,   165,     0,   169,     0,   166,     0,   167,     0,
     168,     0,    37,     0,    25,     0,    25,    25,     0,   170,
       0,   171,     0,   172,     0,    46,    37,     0,    46,    25,
       0,    46,    25,    25,     0,     9,     0,    50,     0,     7,
       0,    29,     0,     5,     0,    28,     0,   180,   231,    70,
     231,   181,    71,     0,   180,     1,     0,    39,     3,     0,
     182,   231,     0,   181,   182,   231,     0,   154,   159,    69,
       0,     1,     0,   184,   231,    41,    74,   231,   185,   231,
      75,   231,    70,   231,   186,    71,     0,   184,     1,     0,
      45,     3,     0,   164,     0,   173,     0,   175,     0,   192,
       0,   110,     0,   187,     0,   188,   231,     0,   187,   188,
     231,     0,   189,   191,    69,     0,   190,     0,   189,   190,
       0,     8,   137,    72,   231,     0,    13,    72,   231,     0,
     154,   160,     0,   193,   231,    70,   231,   194,    71,     0,
     193,     1,     0,    15,     3,     0,   195,   231,     0,   194,
      73,   231,   195,   231,     0,     3,     0,    36,    86,   155,
      73,   151,    87,     0,    36,    86,   155,    87,     0,    38,
      86,   151,    87,     0,    38,     0,    51,    86,   151,    87,
       0,    51,     0,     3,   200,     0,   201,     0,   200,   201,
       0,    88,   151,    89,     0,   203,     6,   224,   204,     0,
       0,    35,     0,   161,   231,     0,   204,    73,   231,   161,
     231,     0,   206,   231,    70,   231,   207,    71,     0,   206,
       1,     0,    16,     3,     0,     0,   207,   182,     0,     0,
     210,   231,   214,   209,   231,   218,   221,     0,   210,     1,
       0,   211,   213,     3,     0,     0,   212,     0,    30,     0,
     224,     0,    49,     0,    74,   231,   215,    75,     0,    74,
     231,    75,     0,    74,     1,    75,     0,   216,   231,     0,
     215,    73,   231,   216,   231,     0,   217,   224,     3,     0,
      21,     0,    31,     0,    22,     0,     0,   219,   231,     0,
      34,    74,   220,    75,     0,   110,   231,     0,   220,    73,
     231,   110,   231,     0,     0,   222,   231,     0,    11,    74,
     223,    75,     0,   148,   231,     0,   223,    73,   231,   148,
     231,     0,   156,     0,   197,     0,   198,     0,   110,     0,
      19,    86,   151,    73,   137,    87,     0,    19,     0,    47,
       0,    39,     3,     0,    45,     3,     0,   233,     0,   234,
       0,   235,     0,   236,     0,   229,     0,   230,   229,     0,
       0,   230,     0,    53,   148,    57,     0,    53,     1,     0,
      54,   110,   148,    57,     0,    54,     1,    57,     0,    55,
     110,    59,    90,    59,    57,     0,    55,     1,    57,     0,
      52,   237,    57,     0,    56,   237,    57,     0,    58,     0,
     237,    58,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   403,   405,   411,   413,   419,   421,   422,   423,   424,
     425,   426,   427,   428,   434,   439,   439,   446,   454,   458,
     460,   463,   468,   468,   475,   483,   489,   497,   499,   500,
     503,   507,   509,   515,   517,   518,   519,   520,   521,   522,
     528,   530,   533,   537,   545,   553,   560,   564,   568,   571,
     581,   583,   584,   585,   588,   592,   597,   605,   605,   613,
     613,   622,   634,   641,   647,   652,   655,   660,   664,   667,
     672,   679,   681,   684,   692,   702,   706,   708,   714,   716,
     717,   720,   728,   730,   733,   733,   740,   740,   750,   756,
     758,   761,   763,   769,   777,   783,   785,   786,   787,   788,
     789,   790,   791,   792,   795,   798,   802,   804,   807,   809,
     812,   814,   819,   821,   824,   829,   831,   832,   835,   837,
     840,   843,   848,   854,   857,   859,   860,   863,   867,   868,
     871,   875,   878,   881,   884,   887,   890,   893,   898,   900,
     909,   911,   920,   922,   925,   934,   936,   937,   938,   939,
     942,   945,   953,   955,   958,   960,   961,   966,   968,   969,
     970,   971,   972,   973,   974,   975,   978,   980,   981,   982,
     985,   987,   988,   991,   993,   999,  1001,  1004,  1010,  1014,
    1016,  1017,  1020,  1022,  1025,  1027,  1028,  1031,  1035,  1039,
    1043,  1045,  1046,  1049,  1053,  1057,  1061,  1065,  1069,  1073,
    1077,  1081,  1085,  1090,  1098,  1104,  1106,  1112,  1118,  1125,
    1134,  1142,  1148,  1150,  1151,  1152,  1153,  1159,  1163,  1165,
    1171,  1178,  1180,  1186,  1190,  1195,  1202,  1207,  1214,  1220,
    1222,  1228,  1234,  1238,  1243,  1245,  1250,  1252,  1257,  1263,
    1265,  1271,  1275,  1281,  1283,  1286,  1288,  1294,  1299,  1307,
    1313,  1315,  1321,  1321,  1328,  1337,  1343,  1345,  1348,  1352,
    1354,  1357,  1359,  1360,  1367,  1369,  1375,  1381,  1383,  1384,
    1387,  1389,  1392,  1396,  1400,  1406,  1408,  1411,  1415,  1419,
    1425,  1427,  1428,  1429,  1434,  1457,  1463,  1467,  1471,  1476,
    1478,  1479,  1480,  1483,  1485,  1488,  1490,  1493,  1497,  1502,
    1507,  1512,  1517,  1522,  1528,  1534,  1536
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "IDENTIFIER", "ABSTRACT", "ANY", "ATTRIBUTE", 
  "BOOLEAN", "CASE", "CHAR", "CONST", "CONTEXT", "CUSTOM", "DEFAULT", 
  "DOUBLE", "ENUM", "EXCEPTION", "FACTORY", "FALSE_", "FIXED", "FLOAT", 
  "IN", "INOUT", "INTERFACE", "LOCAL", "LONG", "MODULE", "NATIVE", 
  "OBJECT", "OCTET", "ONEWAY", "OUT", "PRIVATE", "PUBLIC", "RAISES", 
  "READONLY", "SEQUENCE", "SHORT", "STRING", "STRUCT", "SUPPORTS", 
  "SWITCH", "TRUE_", "TRUNCATABLE", "TYPEDEF", "UNION", "UNSIGNED", 
  "VALUEBASE", "VALUETYPE", "VOID", "WCHAR", "WSTRING", "PRAGMA", 
  "PRAGMA_PREFIX", "PRAGMA_ID", "PRAGMA_VERSION", "OMNI_PRAGMA", 
  "END_PRAGMA", "UNKNOWN_PRAGMA_BODY", "INTEGER_LITERAL", 
  "CHARACTER_LITERAL", "WIDE_CHARACTER_LITERAL", "FLOATING_PT_LITERAL", 
  "STRING_LITERAL", "WIDE_STRING_LITERAL", "FIXED_PT_LITERAL", 
  "SCOPE_DELIM", "LEFT_SHIFT", "RIGHT_SHIFT", "';'", "'{'", "'}'", "':'", 
  "','", "'('", "')'", "'='", "'|'", "'^'", "'&'", "'+'", "'-'", "'*'", 
  "'/'", "'%'", "'~'", "'<'", "'>'", "'['", "']'", "'.'", "start", 
  "definition_plus", "definition", "module", "@1", "module_header", 
  "interface", "interface_dcl", "@2", "forward_dcl", "interface_header", 
  "abstract_local_opt", "interface_body", "export_star", "export", 
  "interface_inheritance_spec_opt", "interface_inheritance_spec", 
  "interface_inheritance_list", "interface_name", "scoped_name", "value", 
  "value_forward_dcl", "value_box_dcl", "value_abs_dcl", "@3", "@4", 
  "value_dcl", "value_header", "value_inheritance_spec", 
  "value_value_inheritance_spec", "truncatable_opt", 
  "value_inheritance_list", "value_name", "value_element_star", 
  "value_element", "state_member", "member_access", "init_dcl", "@5", 
  "@6", "init_dcl_header", "init_param_decls_opt", "init_param_decls", 
  "init_param_decl", "const_dcl", "const_type", "const_exp", "or_expr", 
  "xor_expr", "and_expr", "shift_expr", "add_expr", "mult_expr", 
  "unary_expr", "unary_operator", "primary_expr", "literal", 
  "string_literal_plus", "wide_string_literal_plus", "boolean_literal", 
  "positive_int_const", "type_dcl", "type_declarator", "type_spec", 
  "simple_type_spec", "base_type_spec", "template_type_spec", 
  "constr_type_spec", "declarators", "declarator", "simple_declarator", 
  "complex_declarator", "floating_pt_type", "integer_type", "signed_int", 
  "signed_short_int", "signed_long_int", "signed_long_long_int", 
  "unsigned_int", "unsigned_short_int", "unsigned_long_int", 
  "unsigned_long_long_int", "char_type", "wide_char_type", "boolean_type", 
  "octet_type", "any_type", "object_type", "struct_type", "struct_header", 
  "member_list", "member", "union_type", "union_header", 
  "switch_type_spec", "switch_body", "case_plus", "case", 
  "case_label_plus", "case_label", "element_spec", "enum_type", 
  "enum_header", "enumerator_list", "enumerator", "sequence_type", 
  "string_type", "wide_string_type", "array_declarator", 
  "fixed_array_size_plus", "fixed_array_size", "attr_dcl", "readonly_opt", 
  "simple_declarator_list", "except_dcl", "except_header", "member_star", 
  "op_dcl", "@7", "op_header", "op_attribute_opt", "op_attribute", 
  "op_type_spec", "parameter_dcls", "param_dcl_list", "param_dcl", 
  "param_attribute", "raises_expr_opt", "raises_expr", "scoped_name_list", 
  "context_expr_opt", "context_expr", "string_literal_list", 
  "param_type_spec", "fixed_pt_type", "fixed_pt_const_type", 
  "value_base_type", "constr_forward_decl", "pragma", "pragmas", 
  "pragmas_opt", "pragma_prefix", "pragma_id", "pragma_version", 
  "unknown_pragma", "omni_pragma", "unknown_pragma_body_plus", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    91,    91,    92,    92,    93,    93,    93,    93,    93,
      93,    93,    93,    93,    94,    95,    94,    94,    96,    97,
      97,    98,    99,    98,    98,   100,   101,   102,   102,   102,
     103,   104,   104,   105,   105,   105,   105,   105,   105,   105,
     106,   106,   107,   108,   108,   108,   109,   110,   110,   110,
     111,   111,   111,   111,   112,   112,   113,   115,   114,   116,
     114,   114,   117,   118,   118,   118,   118,   119,   119,   119,
     120,   121,   121,   122,   122,   123,   124,   124,   125,   125,
     125,   126,   127,   127,   129,   128,   130,   128,   131,   132,
     132,   133,   133,   134,   135,   136,   136,   136,   136,   136,
     136,   136,   136,   136,   136,   137,   138,   138,   139,   139,
     140,   140,   141,   141,   141,   142,   142,   142,   143,   143,
     143,   143,   144,   144,   145,   145,   145,   146,   146,   146,
     147,   147,   147,   147,   147,   147,   147,   147,   148,   148,
     149,   149,   150,   150,   151,   152,   152,   152,   152,   152,
     152,   153,   154,   154,   155,   155,   155,   156,   156,   156,
     156,   156,   156,   156,   156,   156,   157,   157,   157,   157,
     158,   158,   158,   159,   159,   160,   160,   161,   162,   163,
     163,   163,   164,   164,   165,   165,   165,   166,   167,   168,
     169,   169,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   179,   180,   181,   181,   182,   182,   183,
     183,   184,   185,   185,   185,   185,   185,   186,   187,   187,
     188,   189,   189,   190,   190,   191,   192,   192,   193,   194,
     194,   195,   196,   196,   197,   197,   198,   198,   199,   200,
     200,   201,   202,   203,   203,   204,   204,   205,   205,   206,
     207,   207,   209,   208,   208,   210,   211,   211,   212,   213,
     213,   214,   214,   214,   215,   215,   216,   217,   217,   217,
     218,   218,   219,   220,   220,   221,   221,   222,   223,   223,
     224,   224,   224,   224,   225,   226,   227,   228,   228,   229,
     229,   229,   229,   230,   230,   231,   231,   232,   232,   233,
     233,   234,   234,   235,   236,   237,   237
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     1,     1,     2,     2,     2,     2,     2,     2,
       2,     1,     1,     1,     5,     0,     6,     2,     2,     1,
       1,     4,     0,     6,     2,     3,     5,     0,     1,     1,
       1,     0,     2,     2,     2,     2,     2,     2,     1,     1,
       0,     1,     2,     2,     5,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     2,     3,     3,     0,     7,     0,
       8,     1,     4,     3,     4,     2,     3,     4,     2,     2,
       2,     0,     1,     1,     3,     1,     0,     2,     1,     1,
       1,     4,     1,     1,     0,     7,     0,     6,     2,     0,
       1,     1,     3,     3,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     3,
       1,     3,     1,     3,     3,     1,     3,     3,     1,     3,
       3,     3,     2,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     2,     1,     1,     1,     2,     1,     1,     1,     2,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     5,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     2,     2,     3,     1,     1,     1,     1,
       1,     1,     6,     2,     2,     2,     3,     3,     1,    13,
       2,     2,     1,     1,     1,     1,     1,     1,     2,     3,
       3,     1,     2,     4,     3,     2,     6,     2,     2,     2,
       5,     1,     6,     4,     4,     1,     4,     1,     2,     1,
       2,     3,     4,     0,     1,     2,     5,     6,     2,     2,
       0,     2,     0,     7,     2,     3,     0,     1,     1,     1,
       1,     4,     3,     3,     2,     5,     3,     1,     1,     1,
       0,     2,     4,     2,     5,     0,     2,     4,     2,     5,
       1,     1,     1,     1,     6,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     2,     0,     1,     3,     2,     4,
       3,     6,     3,     3,     3,     1,     2
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,    13,    28,     0,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       3,     0,     0,     0,    19,    20,     0,     0,     0,    53,
      52,    51,    50,     0,     0,     0,   146,     0,   147,     0,
     148,     0,     0,     0,   150,    11,    12,   289,   290,   291,
     292,     0,    47,   198,   196,   180,   285,   179,   188,   199,
     187,   235,     0,   197,   237,     0,   103,     0,    99,    95,
     182,   184,   185,   186,   183,   190,   191,   192,    96,    97,
      98,   104,   100,   101,   102,     0,   228,   249,    18,   149,
     204,   200,     0,   201,     0,     0,     0,   286,   156,   145,
       0,   152,   154,   155,   153,   157,   158,   159,   160,   161,
     162,   163,   164,   170,   171,   172,   166,   167,   168,   169,
     165,   211,    54,   305,     0,   298,   138,     0,     0,     0,
       0,     0,     0,     4,     9,    15,   293,   296,     0,     8,
      22,    31,     0,    10,    76,     6,     5,   203,     0,   210,
       0,   227,     0,     7,   248,     0,    55,   181,   189,     0,
     194,   193,     0,    48,     0,     0,    66,     0,     0,   204,
     211,   177,   151,   295,   175,   176,   178,     0,    71,    63,
      56,   303,   306,   297,   139,   300,     0,   302,     0,   304,
       0,   294,     0,     0,     0,     0,   295,     0,   295,     0,
     295,   295,     0,    59,   143,   142,   130,   133,   134,   136,
     140,   135,     0,   125,   124,   126,   127,   144,   105,   106,
     108,   110,   112,   115,   118,     0,   123,   128,   131,   132,
     137,     0,   195,     0,    49,     0,    64,     0,     0,     0,
     238,   239,   295,   173,    45,    69,   295,    46,    72,    68,
       0,   299,     0,     0,     0,    31,    21,    39,   258,   244,
      32,     0,     0,     0,     0,     0,     0,     0,     0,   257,
      38,    40,     0,    83,    82,    62,    78,    77,    79,     0,
      80,     0,     0,   295,     0,   250,    31,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     141,   234,   236,    94,     0,     0,   233,     0,   240,     0,
     295,    43,     0,    75,    70,    73,     0,     0,    14,     0,
      34,    33,    36,     0,    35,    37,   254,     0,   260,   283,
     280,   281,   282,     0,   259,     0,    26,    41,    88,     0,
       0,   208,     0,     0,   295,     0,   231,     0,   295,     0,
       0,    31,   129,   107,   109,   111,   114,   113,   116,   117,
     119,   120,   121,     0,     0,   241,   295,     0,    67,     0,
     301,    16,    23,     0,     0,   252,   255,    42,     0,     0,
       0,     0,    90,    91,     0,   202,   295,   205,   188,   216,
     212,   213,   214,   295,   215,   226,   295,   229,   247,   251,
      58,     0,   284,   232,   174,   295,    74,   177,   295,   242,
       0,     0,   295,    81,    86,     0,    84,     0,   207,   206,
       0,     0,    60,    44,   245,   295,   263,   267,   269,   268,
     262,     0,   295,     0,   270,     0,    93,   270,    92,   295,
     295,     0,   295,   261,   264,     0,     0,   275,   295,    87,
       0,     0,   230,   295,     0,   266,     0,     0,   253,   295,
     271,    85,   295,   246,   295,   295,     0,     0,   276,     0,
     265,   273,   295,   272,   295,     0,     0,     0,     0,   217,
     295,     0,   221,     0,   278,   295,   277,     0,   295,   209,
     295,   218,     0,   222,     0,   295,     0,   295,   224,   219,
     225,   220,   274,   295,   223,   279,     0,     0,     0
};

static const short yydefgoto[] =
{
     506,    19,    20,    21,   190,    22,    23,    24,   193,    25,
      26,    27,   194,   195,   260,   336,   337,   245,   246,   216,
      28,    29,    30,    31,   202,   287,    32,    33,   179,   249,
     250,   314,   315,   197,   277,   278,   279,   280,   437,   435,
     281,   381,   382,   383,    34,    67,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    35,    99,   342,   101,   102,   103,   104,   172,   173,
     174,   175,   105,   106,    70,    71,    72,    73,    74,    75,
      76,    77,   107,   108,   109,   110,   111,   112,    36,    37,
     343,   344,    38,    39,   393,   478,   479,   480,   481,   482,
     494,    40,    41,   347,   348,   116,   117,   118,   176,   240,
     241,   263,   264,   409,    42,    43,   349,   266,   412,   267,
     268,   269,   333,   375,   431,   432,   433,   447,   448,   466,
     458,   459,   475,   334,   119,    84,   120,    44,   136,   137,
     138,    46,    47,    48,    49,    50,   124
};

static const short yypact[] =
{
    1261,   -31,    23,  1229,    35,    84,   121,-32768,   136,   152,
     174,  1037,   177,   191,    86,    56,    34,    39,    86,  1318,
  -32768,   128,   151,   135,-32768,-32768,    33,   185,   153,-32768,
  -32768,-32768,-32768,   164,   169,   170,-32768,   157,-32768,   305,
  -32768,   181,   171,   209,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   241,-32768,-32768,-32768,-32768,-32768,-32768,    31,-32768,
  -32768,   161,    14,-32768,   173,   245,   189,   253,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,   257,-32768,-32768,-32768,-32768,
     193,-32768,   180,-32768,   184,   268,   272,-32768,   189,-32768,
     286,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   221,   279,-32768,   116,-32768,-32768,    17,   235,    63,
     238,     1,   162,-32768,-32768,   227,-32768,   198,   230,-32768,
     228,-32768,   298,-32768,-32768,-32768,-32768,-32768,   232,-32768,
     262,-32768,   239,-32768,-32768,   240,    -8,-32768,-32768,    30,
     288,-32768,    30,-32768,   311,   244,     9,    30,  1086,-32768,
  -32768,   243,   254,   198,-32768,-32768,-32768,    40,   289,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,    77,-32768,   246,-32768,
     270,-32768,  1374,   282,   287,   598,    81,   540,   198,   290,
     198,   198,   292,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,    30,-32768,-32768,-32768,   189,-32768,   293,   294,
     295,    97,   144,   109,-32768,   124,-32768,-32768,   310,   314,
  -32768,   296,-32768,   297,-32768,    30,-32768,   302,   -37,    30,
     243,-32768,   198,-32768,-32768,   312,   198,   189,-32768,   346,
      43,-32768,   329,  1374,   877,-32768,-32768,-32768,-32768,-32768,
  -32768,   323,   325,   327,   391,   333,   334,   107,  1135,-32768,
  -32768,   332,   403,-32768,-32768,-32768,-32768,-32768,-32768,  1037,
  -32768,   336,   362,   198,   411,-32768,-32768,   345,   341,    30,
      30,    30,    30,    30,    30,    30,    30,    30,    30,-32768,
  -32768,-32768,-32768,-32768,    30,    30,-32768,   328,-32768,   286,
     198,-32768,    40,   189,   350,-32768,   367,   934,-32768,   354,
  -32768,-32768,-32768,  1184,-32768,-32768,-32768,   352,-32768,   189,
  -32768,-32768,-32768,   424,-32768,    40,-32768,-32768,-32768,   286,
      26,-32768,   286,   772,   198,   573,-32768,   129,   198,   825,
     656,-32768,-32768,   294,   295,    97,   144,   144,   109,   109,
  -32768,-32768,-32768,   343,   347,-32768,   198,    43,   312,    43,
  -32768,-32768,-32768,   432,    76,-32768,-32768,   312,    80,   361,
    1184,   364,   369,-32768,    87,-32768,   198,-32768,   412,   189,
  -32768,-32768,-32768,   198,-32768,-32768,   198,-32768,-32768,-32768,
  -32768,   714,-32768,-32768,-32768,   198,-32768,-32768,   198,   370,
     365,    48,   198,-32768,-32768,   441,-32768,   425,-32768,-32768,
     372,   411,-32768,-32768,-32768,   198,-32768,-32768,-32768,-32768,
  -32768,     3,   198,  1184,   415,   376,-32768,   415,-32768,   198,
     198,   432,   198,-32768,-32768,   448,   380,   445,   198,-32768,
     389,   390,-32768,   198,    44,-32768,    43,   385,-32768,   198,
  -32768,-32768,   198,-32768,   198,    91,   141,   398,-32768,    46,
  -32768,-32768,   198,-32768,   366,   142,    30,   392,   394,    46,
     198,   988,-32768,    43,-32768,   198,-32768,   395,   198,-32768,
     198,-32768,   286,-32768,   393,    91,   398,   198,-32768,-32768,
  -32768,-32768,-32768,   366,-32768,-32768,   463,   466,-32768
};

static const short yypgoto[] =
{
  -32768,  -131,   -12,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   213,  -233,   275,-32768,-32768,  -283,   102,    -1,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -93,-32768,
  -32768,-32768,   104,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,    57,  -178,-32768,  -191,-32768,   194,   188,
     195,   -64,   -63,  -127,-32768,   263,-32768,   -15,-32768,-32768,
    -137,  -175,-32768,    -5,   321,  -255,-32768,-32768,  -284,  -297,
    -342,-32768,   487,     5,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,     8,   488,    11,   489,-32768,-32768,    -6,-32768,
  -32768,  -195,    -2,-32768,-32768,-32768,-32768,    16,-32768,    13,
  -32768,   -10,-32768,-32768,    75,-32768,     0,    15,-32768,-32768,
     259,-32768,-32768,-32768,  -171,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,    47,-32768,    60,-32768,-32768,
  -32768,-32768,-32768,  -295,-32768,-32768,-32768,-32768,     4,-32768,
      45,-32768,-32768,-32768,-32768,-32768,   482
};


#define	YYLAST		1430


static const short yytable[] =
{
     127,   115,    66,    82,    45,   113,   100,   133,    69,   114,
      98,    78,   366,   330,    80,   129,   131,   261,    83,   261,
     262,   288,   262,    45,   265,   233,   265,   379,   373,   368,
     237,   408,   177,    52,   140,   128,   305,    52,   -61,   160,
     130,   244,    52,    52,   303,   157,    52,   380,   204,   177,
     306,   161,   377,   350,   476,   378,   158,   125,   384,   477,
     188,   254,   -57,   203,   178,   427,   428,   164,   330,   427,
     428,    51,   205,   236,   183,   429,   442,   410,   443,   429,
     184,   178,   148,    85,   150,   415,   152,    86,   155,   206,
     207,   208,   209,   126,   210,   211,    65,  -295,  -295,   453,
      65,   -89,   307,   141,   212,    65,    65,  -295,   326,    65,
     213,   214,   115,   363,   186,   215,   113,   180,   401,   126,
     114,    98,   317,   430,    87,   330,   126,    52,    14,   164,
      16,    17,    18,    14,   251,    16,    17,    18,   445,    88,
     184,   191,   204,    14,   123,    16,    17,    18,   386,   413,
     -25,  -295,   135,   242,   399,    89,   418,   164,   147,    14,
     242,    16,    17,    18,   292,   293,   205,    98,   364,   360,
     361,   362,   261,   181,   182,   262,   247,    90,   330,   265,
     121,  -295,   151,   206,   207,   208,   209,   126,   210,   211,
      65,   296,   297,   298,   122,   500,    45,   134,   212,   270,
     395,   270,   396,    14,   139,    16,    17,    18,   142,    14,
     154,    16,    17,    18,   472,   485,   473,   486,   243,   189,
     182,  -295,   143,   261,   294,   295,   262,  -295,   356,   357,
     265,   358,   359,    14,   144,    16,    17,    18,   145,   146,
     153,   271,   133,   282,   156,   284,   285,   159,   163,   313,
      14,  -295,    16,    17,    18,   164,   165,    45,    45,   162,
     166,    14,  -287,    16,    17,    18,   167,   329,   331,   115,
     168,   169,   115,   113,   339,   170,   113,   114,    98,  -295,
     114,    98,    52,   332,    91,   487,    53,   309,    54,   171,
    -288,   311,   185,    55,     5,   187,   -17,   -24,    92,    57,
     192,   196,   198,   199,    58,   133,   149,    93,    59,   200,
     201,   247,   327,   232,   234,    94,    60,    61,    95,   177,
     235,    45,   329,   331,    96,    62,    97,   242,   345,    63,
      64,   239,   248,   115,   247,   394,   252,   113,   332,   115,
     253,   114,    98,   113,   389,    65,  -295,   114,    98,   -65,
     390,   178,   255,   391,   270,   367,   392,    14,   256,    16,
      17,    18,   286,   341,   283,    52,   247,    91,   313,    53,
     289,    54,   290,   184,   291,   304,    55,     5,   300,   329,
     331,    92,    57,   301,   302,   310,   312,    58,   316,   387,
      93,    59,   320,   397,   321,   332,   322,   323,    94,    60,
      61,    95,   324,   325,   335,   270,   338,    96,    62,    97,
     340,   404,    63,    64,   346,   351,   352,   365,    14,   411,
      16,    17,    18,   369,   370,   372,   374,   376,    65,   184,
     402,   419,   329,   331,   403,   407,   414,   158,   420,   416,
     426,   421,   417,   425,   436,   449,   380,   439,   332,   446,
     423,   455,   474,   424,   456,   465,   457,   434,   461,   467,
     462,   126,   501,   507,   488,   489,   508,   497,   319,   405,
     441,   115,   276,   406,   438,   113,   492,   444,   354,   114,
      98,   503,   495,   353,   451,   452,   355,   454,   299,   238,
      68,    79,    81,   460,   493,   490,   440,   450,   463,   308,
     132,   464,     0,     0,   468,     0,     0,   469,     0,   470,
     471,     0,     0,     0,     0,     0,     0,   483,     0,   484,
       0,     0,     0,     0,     0,   491,     0,     0,     0,     0,
     496,     0,     0,   498,     0,   499,     0,     0,     0,     0,
     502,   257,   504,  -256,     0,  -256,  -243,  -256,   505,  -256,
       3,     0,     0,     0,  -256,     5,     6,   272,     0,     0,
    -256,     0,     0,     0,     0,  -256,     0,     9,  -256,  -256,
     258,     0,   273,   274,     0,   259,    52,  -256,  -256,    10,
      53,     0,    54,     0,    11,    12,  -256,  -256,     5,  -256,
    -256,  -256,    14,     0,    16,    17,    18,     0,   388,   257,
       0,  -256,     0,  -256,  -243,  -256,  -256,  -256,     3,     0,
      60,   275,  -256,     5,     6,     0,     0,     0,  -256,    62,
       0,     0,     0,  -256,     0,     9,  -256,  -256,   258,     0,
       0,     0,     0,   259,     0,  -256,  -256,    10,     0,    65,
       0,     0,    11,    12,  -256,  -256,     0,  -256,  -256,  -256,
      14,     0,    16,    17,    18,     0,     0,   257,     0,  -256,
       0,  -256,  -243,  -256,  -256,  -256,     3,     0,     0,   -30,
    -256,     5,     6,     0,     0,     0,  -256,     0,     0,     0,
       0,  -256,     0,     9,  -256,  -256,   258,     0,     0,     0,
       0,   259,     0,  -256,  -256,    10,     0,     0,     0,     0,
      11,    12,  -256,  -256,     0,  -256,  -256,  -256,    14,     0,
      16,    17,    18,     0,     0,   257,     0,  -256,     0,  -256,
    -243,  -256,  -256,  -256,     3,     0,     0,   400,  -256,     5,
       6,     0,     0,     0,  -256,     0,     0,     0,     0,  -256,
       0,     9,  -256,  -256,   258,     0,     0,     0,     0,   259,
       0,  -256,  -256,    10,     0,     0,     0,     0,    11,    12,
    -256,  -256,     0,  -256,  -256,  -256,    14,     0,    16,    17,
      18,     0,     0,   341,     0,    52,     0,    91,     0,    53,
    -256,    54,     0,     0,     0,   422,    55,     5,     0,     0,
       0,    92,    57,     0,     0,     0,     0,    58,     0,     0,
      93,    59,     0,     0,     0,     0,     0,     0,    94,    60,
      61,    95,     0,     0,     0,     0,     0,    96,    62,    97,
       0,     0,    63,    64,     0,     0,   341,     0,    52,     0,
      91,     0,    53,     0,    54,     0,     0,     0,    65,    55,
       5,     0,     0,   385,    92,    57,     0,     0,     0,     0,
      58,     0,     0,    93,    59,     0,     0,     0,     0,     0,
       0,    94,    60,    61,    95,     0,     0,     0,     0,     0,
      96,    62,    97,     0,     0,    63,    64,     0,     1,     0,
       0,     2,     0,     0,     0,     0,     0,     3,     0,     4,
       0,    65,     5,     6,     0,     0,   398,     0,     0,     0,
     -27,     7,     0,     8,     9,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    10,     0,     0,     0,
       0,    11,    12,     0,     0,    13,     0,     0,     0,    14,
      15,    16,    17,    18,     0,     1,     0,     0,     2,     0,
       0,     0,     0,     0,     3,     0,     4,     0,   318,     5,
       6,     0,     0,     0,     0,     0,     0,   -27,     7,     0,
       8,     9,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    10,     0,     0,     0,     0,    11,    12,
       0,     0,    13,     0,     0,     0,    14,    15,    16,    17,
      18,    52,     0,    91,     0,    53,   476,    54,     0,     0,
       0,   477,    55,     5,     0,   371,     0,    92,    57,     0,
       0,     0,     0,    58,     0,     0,    93,    59,     0,     0,
       0,     0,     0,     0,    94,    60,    61,    95,     0,     0,
       0,     0,     0,    96,    62,    97,     0,     0,    63,    64,
      52,     0,    91,     0,    53,     0,    54,     0,     0,     0,
       0,    55,     5,     0,    65,     0,    92,    57,     0,     0,
       0,     0,    58,     0,     0,    93,    59,     0,     0,     0,
       0,     0,     0,    94,    60,    61,    95,     0,     0,     0,
       0,     0,    96,    62,    97,     0,     0,    63,    64,    52,
       0,    91,     0,    53,     0,    54,     0,     0,     0,     0,
      55,     0,     0,    65,     0,    92,    57,     0,     0,     0,
       0,    58,     0,     0,    93,    59,     0,     0,     0,     0,
       0,     0,    94,    60,    61,     0,     0,     0,     0,     0,
       0,     0,    62,    97,     0,     0,    63,    64,    52,     0,
      91,     0,    53,     0,    54,     0,     0,     0,     0,    55,
       0,     0,    65,     0,     0,    57,     0,     0,     0,     0,
      58,     0,     0,    93,    59,     0,     0,     0,     0,     0,
       0,     0,    60,    61,     0,     0,     0,     0,     0,     0,
       0,    62,    97,     0,   328,    63,    64,    52,     0,    91,
       0,    53,     0,    54,     0,     0,     0,     0,    55,     0,
       0,    65,     0,     0,    57,     0,     0,     0,     0,    58,
       0,     0,    93,    59,     0,     0,     0,     0,     0,     0,
       0,    60,    61,     0,     0,     0,     0,     0,     0,     0,
      62,    97,    52,     0,    63,    64,    53,     0,    54,     0,
       0,     0,     0,    55,     0,     0,     0,     0,    56,    57,
      65,     0,     0,     0,    58,     0,     0,     0,    59,     0,
       0,    -1,     1,     0,     0,     2,    60,    61,     0,     0,
       0,     3,     0,     4,     0,    62,     5,     6,     0,    63,
      64,     0,     0,     0,   -27,     7,     0,     8,     9,     0,
       0,     0,     0,     0,     0,    65,     0,     0,     0,     0,
      10,     0,     0,     0,     0,    11,    12,     0,     0,    13,
       0,     0,     0,    14,    15,    16,    17,    18,    -2,     1,
       0,     0,     2,     0,     0,     0,     0,     0,     3,     0,
       4,     0,     0,     5,     6,     0,     0,     0,     0,     0,
       0,   -27,     7,     0,     8,     9,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    10,     0,     0,
       0,     0,    11,    12,     0,     0,    13,     0,     0,     0,
      14,    15,    16,    17,    18,     1,     0,     0,     2,     0,
       0,     0,     0,     0,     3,     0,     4,     0,     0,     5,
       6,     0,     0,     0,     0,     0,     0,   -27,     7,     0,
       8,     9,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    10,     0,     0,     0,     0,    11,    12,
       0,     0,    13,     0,     0,     0,    14,    15,    16,    17,
      18
};

static const short yycheck[] =
{
      15,    11,     3,     3,     0,    11,    11,    19,     3,    11,
      11,     3,   309,   268,     3,    16,    17,   195,     3,   197,
     195,   212,   197,    19,   195,   162,   197,     1,   323,   312,
     167,   373,    40,     3,     1,     1,    73,     3,    69,    25,
       1,     1,     3,     3,   235,    14,     3,    21,    18,    40,
      87,    37,   335,   286,     8,   339,    25,     1,   342,    13,
      59,   192,    70,   156,    72,    21,    22,    66,   323,    21,
      22,    48,    42,   166,    57,    31,    73,     1,    75,    31,
      63,    72,    37,    48,    39,   380,    41,     3,    43,    59,
      60,    61,    62,    63,    64,    65,    66,    21,    22,   441,
      66,    75,   239,    70,    74,    66,    66,    31,     1,    66,
      80,    81,   122,   304,   129,    85,   122,   122,   351,    63,
     122,   122,   253,    75,     3,   380,    63,     3,    52,    66,
      54,    55,    56,    52,    57,    54,    55,    56,   433,     3,
      63,   137,    18,    52,    58,    54,    55,    56,   343,    69,
      69,    75,     1,    73,   349,     3,    69,    66,     1,    52,
      73,    54,    55,    56,    67,    68,    42,   168,   305,   296,
     297,   298,   350,    57,    58,   350,   177,     3,   433,   350,
       3,    74,     1,    59,    60,    61,    62,    63,    64,    65,
      66,    82,    83,    84,     3,   492,   192,    69,    74,   195,
      71,   197,    73,    52,    69,    54,    55,    56,    23,    52,
       1,    54,    55,    56,    73,    73,    75,    75,   173,    57,
      58,    70,    69,   401,    80,    81,   401,    70,   292,   293,
     401,   294,   295,    52,    70,    54,    55,    56,    69,    69,
      69,   196,   254,   198,     3,   200,   201,    86,     3,   250,
      52,    70,    54,    55,    56,    66,     3,   253,   254,    86,
       3,    52,    69,    54,    55,    56,    86,   268,   268,   279,
      86,     3,   282,   279,   279,     3,   282,   279,   279,    70,
     282,   282,     3,   268,     5,   476,     7,   242,     9,     3,
      69,   246,    57,    14,    15,    57,    69,    69,    19,    20,
      70,     3,    70,    41,    25,   317,     1,    28,    29,    70,
      70,   312,   267,    25,     3,    36,    37,    38,    39,    40,
      76,   317,   323,   323,    45,    46,    47,    73,   283,    50,
      51,    88,    43,   343,   335,   345,    90,   343,   323,   349,
      70,   343,   343,   349,   345,    66,    41,   349,   349,    70,
     345,    72,    70,   345,   350,   310,   345,    52,    71,    54,
      55,    56,    70,     1,    74,     3,   367,     5,   369,     7,
      77,     9,    78,    63,    79,    73,    14,    15,    64,   380,
     380,    19,    20,    87,    87,    73,    40,    25,    59,   344,
      28,    29,    69,   348,    69,   380,    69,     6,    36,    37,
      38,    39,    69,    69,    72,   401,     3,    45,    46,    47,
      74,   366,    50,    51,     3,    70,    75,    89,    52,   374,
      54,    55,    56,    73,    57,    71,    74,     3,    66,    63,
      87,   386,   433,   433,    87,     3,    75,    25,   393,    75,
      75,   396,    73,    73,     3,    69,    21,    75,   433,    34,
     405,     3,   467,   408,    74,   456,    11,   412,    69,    74,
      70,    63,    69,     0,    72,    71,     0,    72,   255,   367,
     425,   481,   197,   369,   417,   481,   481,   432,   290,   481,
     481,   496,   483,   289,   439,   440,   291,   442,   225,   168,
       3,     3,     3,   448,   481,   479,   421,   437,   453,   240,
      18,   454,    -1,    -1,   459,    -1,    -1,   462,    -1,   464,
     465,    -1,    -1,    -1,    -1,    -1,    -1,   472,    -1,   474,
      -1,    -1,    -1,    -1,    -1,   480,    -1,    -1,    -1,    -1,
     485,    -1,    -1,   488,    -1,   490,    -1,    -1,    -1,    -1,
     495,     1,   497,     3,    -1,     5,     6,     7,   503,     9,
      10,    -1,    -1,    -1,    14,    15,    16,    17,    -1,    -1,
      20,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    -1,    35,     3,    37,    38,    39,
       7,    -1,     9,    -1,    44,    45,    46,    47,    15,    49,
      50,    51,    52,    -1,    54,    55,    56,    -1,    25,     1,
      -1,     3,    -1,     5,     6,     7,    66,     9,    10,    -1,
      37,    71,    14,    15,    16,    -1,    -1,    -1,    20,    46,
      -1,    -1,    -1,    25,    -1,    27,    28,    29,    30,    -1,
      -1,    -1,    -1,    35,    -1,    37,    38,    39,    -1,    66,
      -1,    -1,    44,    45,    46,    47,    -1,    49,    50,    51,
      52,    -1,    54,    55,    56,    -1,    -1,     1,    -1,     3,
      -1,     5,     6,     7,    66,     9,    10,    -1,    -1,    71,
      14,    15,    16,    -1,    -1,    -1,    20,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    29,    30,    -1,    -1,    -1,
      -1,    35,    -1,    37,    38,    39,    -1,    -1,    -1,    -1,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    -1,
      54,    55,    56,    -1,    -1,     1,    -1,     3,    -1,     5,
       6,     7,    66,     9,    10,    -1,    -1,    71,    14,    15,
      16,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      -1,    27,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
      -1,    37,    38,    39,    -1,    -1,    -1,    -1,    44,    45,
      46,    47,    -1,    49,    50,    51,    52,    -1,    54,    55,
      56,    -1,    -1,     1,    -1,     3,    -1,     5,    -1,     7,
      66,     9,    -1,    -1,    -1,    71,    14,    15,    -1,    -1,
      -1,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,
      28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    36,    37,
      38,    39,    -1,    -1,    -1,    -1,    -1,    45,    46,    47,
      -1,    -1,    50,    51,    -1,    -1,     1,    -1,     3,    -1,
       5,    -1,     7,    -1,     9,    -1,    -1,    -1,    66,    14,
      15,    -1,    -1,    71,    19,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    37,    38,    39,    -1,    -1,    -1,    -1,    -1,
      45,    46,    47,    -1,    -1,    50,    51,    -1,     1,    -1,
      -1,     4,    -1,    -1,    -1,    -1,    -1,    10,    -1,    12,
      -1,    66,    15,    16,    -1,    -1,    71,    -1,    -1,    -1,
      23,    24,    -1,    26,    27,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    -1,
      -1,    44,    45,    -1,    -1,    48,    -1,    -1,    -1,    52,
      53,    54,    55,    56,    -1,     1,    -1,    -1,     4,    -1,
      -1,    -1,    -1,    -1,    10,    -1,    12,    -1,    71,    15,
      16,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,
      26,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    -1,    -1,    44,    45,
      -1,    -1,    48,    -1,    -1,    -1,    52,    53,    54,    55,
      56,     3,    -1,     5,    -1,     7,     8,     9,    -1,    -1,
      -1,    13,    14,    15,    -1,    71,    -1,    19,    20,    -1,
      -1,    -1,    -1,    25,    -1,    -1,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    37,    38,    39,    -1,    -1,
      -1,    -1,    -1,    45,    46,    47,    -1,    -1,    50,    51,
       3,    -1,     5,    -1,     7,    -1,     9,    -1,    -1,    -1,
      -1,    14,    15,    -1,    66,    -1,    19,    20,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    37,    38,    39,    -1,    -1,    -1,
      -1,    -1,    45,    46,    47,    -1,    -1,    50,    51,     3,
      -1,     5,    -1,     7,    -1,     9,    -1,    -1,    -1,    -1,
      14,    -1,    -1,    66,    -1,    19,    20,    -1,    -1,    -1,
      -1,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    37,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    47,    -1,    -1,    50,    51,     3,    -1,
       5,    -1,     7,    -1,     9,    -1,    -1,    -1,    -1,    14,
      -1,    -1,    66,    -1,    -1,    20,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    47,    -1,    49,    50,    51,     3,    -1,     5,
      -1,     7,    -1,     9,    -1,    -1,    -1,    -1,    14,    -1,
      -1,    66,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      -1,    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    47,     3,    -1,    50,    51,     7,    -1,     9,    -1,
      -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,    19,    20,
      66,    -1,    -1,    -1,    25,    -1,    -1,    -1,    29,    -1,
      -1,     0,     1,    -1,    -1,     4,    37,    38,    -1,    -1,
      -1,    10,    -1,    12,    -1,    46,    15,    16,    -1,    50,
      51,    -1,    -1,    -1,    23,    24,    -1,    26,    27,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,
      -1,    -1,    -1,    52,    53,    54,    55,    56,     0,     1,
      -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    10,    -1,
      12,    -1,    -1,    15,    16,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    -1,    26,    27,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      -1,    -1,    44,    45,    -1,    -1,    48,    -1,    -1,    -1,
      52,    53,    54,    55,    56,     1,    -1,    -1,     4,    -1,
      -1,    -1,    -1,    -1,    10,    -1,    12,    -1,    -1,    15,
      16,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,
      26,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    -1,    -1,    44,    45,
      -1,    -1,    48,    -1,    -1,    -1,    52,    53,    54,    55,
      56
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 1:
#line 404 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 2:
#line 405 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.decl_val = yyvsp[0].decl_val;
      AST::tree()->setDeclarations(yyvsp[0].decl_val);
    ;
    break;}
case 3:
#line 412 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 4:
#line 413 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].decl_val) { yyvsp[-1].decl_val->append(yyvsp[0].decl_val); yyval.decl_val = yyvsp[-1].decl_val; }
      else yyval.decl_val = yyvsp[0].decl_val;
    ;
    break;}
case 5:
#line 420 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].decl_val; ;
    break;}
case 6:
#line 421 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].const_val; ;
    break;}
case 7:
#line 422 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].exception_val; ;
    break;}
case 8:
#line 423 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].decl_val; ;
    break;}
case 9:
#line 424 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].module_val; ;
    break;}
case 10:
#line 425 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].value_base_val; ;
    break;}
case 11:
#line 426 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 12:
#line 427 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 13:
#line 428 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Syntax error in definition");
      yyval.decl_val = 0;
    ;
    break;}
case 14:
#line 435 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].module_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.module_val = yyvsp[-4].module_val;
    ;
    break;}
case 15:
#line 439 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in module definition");
    ;
    break;}
case 16:
#line 442 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].module_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.module_val = yyvsp[-5].module_val;
    ;
    break;}
case 17:
#line 446 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in module definition (no body found)");
      yyvsp[-1].module_val->finishConstruction(0);
      yyval.module_val = yyvsp[-1].module_val;
    ;
    break;}
case 18:
#line 455 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.module_val = new Module(currentFile, yylineno, mainFile, yyvsp[0].id_val); ;
    break;}
case 19:
#line 459 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].interface_val; ;
    break;}
case 20:
#line 460 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].forward_val; ;
    break;}
case 21:
#line 464 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].interface_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.interface_val = yyvsp[-3].interface_val;
    ;
    break;}
case 22:
#line 468 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in interface definition");
    ;
    break;}
case 23:
#line 471 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].interface_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.interface_val = yyvsp[-5].interface_val;
    ;
    break;}
case 24:
#line 475 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in interface definition (no body found)");
      yyvsp[-1].interface_val->finishConstruction(0);
      yyval.interface_val = yyvsp[-1].interface_val;
    ;
    break;}
case 25:
#line 484 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.forward_val = new Forward(currentFile, yylineno, mainFile, yyvsp[0].id_val, yyvsp[-2].int_val==1, yyvsp[-2].int_val==2);
    ;
    break;}
case 26:
#line 491 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.interface_val = new Interface(currentFile, yylineno, mainFile,
			 yyvsp[-2].id_val, yyvsp[-4].int_val==1, yyvsp[-4].int_val==2, yyvsp[0].inheritspec_val);
    ;
    break;}
case 27:
#line 498 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 0; ;
    break;}
case 28:
#line 499 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 1; ;
    break;}
case 29:
#line 500 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 2; ;
    break;}
case 30:
#line 504 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 31:
#line 508 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 32:
#line 509 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].decl_val) { yyvsp[-1].decl_val->append(yyvsp[0].decl_val); yyval.decl_val = yyvsp[-1].decl_val; }
      else yyval.decl_val = yyvsp[0].decl_val;
    ;
    break;}
case 33:
#line 516 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].decl_val; ;
    break;}
case 34:
#line 517 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].const_val; ;
    break;}
case 35:
#line 518 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].exception_val; ;
    break;}
case 36:
#line 519 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].attribute_val; ;
    break;}
case 37:
#line 520 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].operation_val; ;
    break;}
case 38:
#line 521 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 39:
#line 522 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Syntax error in interface body");
      yyval.decl_val = 0;
    ;
    break;}
case 40:
#line 529 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.inheritspec_val = 0; ;
    break;}
case 41:
#line 530 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.inheritspec_val = yyvsp[0].inheritspec_val; ;
    break;}
case 42:
#line 534 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.inheritspec_val = yyvsp[0].inheritspec_val; ;
    break;}
case 43:
#line 538 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.inheritspec_val = new InheritSpec(yyvsp[-1].scopedname_val, currentFile, yylineno);
      if (!yyval.inheritspec_val->interface()) {
	delete yyval.inheritspec_val;
	yyval.inheritspec_val = 0;
      }
    ;
    break;}
case 44:
#line 545 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].inheritspec_val) {
	yyvsp[-4].inheritspec_val->append(new InheritSpec(yyvsp[-1].scopedname_val, currentFile, yylineno),
		   currentFile, yylineno);
	yyval.inheritspec_val = yyvsp[-4].inheritspec_val;
      }
      else yyval.inheritspec_val = new InheritSpec(yyvsp[-1].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 45:
#line 553 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in inheritance list");
      yyval.inheritspec_val = 0;
    ;
    break;}
case 46:
#line 561 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.scopedname_val = yyvsp[0].scopedname_val; ;
    break;}
case 47:
#line 565 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.scopedname_val = new ScopedName(yyvsp[0].id_val, 0);
    ;
    break;}
case 48:
#line 568 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.scopedname_val = new ScopedName(yyvsp[0].id_val, 1);
    ;
    break;}
case 49:
#line 571 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-2].scopedname_val->append(yyvsp[0].id_val);
      yyval.scopedname_val=yyvsp[-2].scopedname_val;
    ;
    break;}
case 50:
#line 582 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_val; ;
    break;}
case 51:
#line 583 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_abs_val; ;
    break;}
case 52:
#line 584 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_box_val; ;
    break;}
case 53:
#line 585 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_forward_val; ;
    break;}
case 54:
#line 589 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_forward_val = new ValueForward(currentFile, yylineno, mainFile, 0, yyvsp[0].id_val);
    ;
    break;}
case 55:
#line 592 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_forward_val = new ValueForward(currentFile, yylineno, mainFile, 1, yyvsp[0].id_val);
    ;
    break;}
case 56:
#line 598 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_box_val = new ValueBox(currentFile, yylineno, mainFile,
			yyvsp[-1].id_val, yyvsp[0].type_spec_val->type(), yyvsp[0].type_spec_val->constr());
      delete yyvsp[0].type_spec_val;
    ;
    break;}
case 57:
#line 606 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack = new ValueAbs(currentFile, yylineno, mainFile, yyvsp[0].id_val, 0, 0);
    ;
    break;}
case 58:
#line 608 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack->finishConstruction(yyvsp[-1].decl_val);
      yyval.value_abs_val = valueabs_hack;
      valueabs_hack = 0;
    ;
    break;}
case 59:
#line 613 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack = new ValueAbs(currentFile, yylineno, mainFile, yyvsp[-1].id_val,
				   yyvsp[0].valueinheritsupportspec_val->inherits(), yyvsp[0].valueinheritsupportspec_val->supports());
      delete yyvsp[0].valueinheritsupportspec_val;
    ;
    break;}
case 60:
#line 617 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack->finishConstruction(yyvsp[-1].decl_val);
      yyval.value_abs_val = valueabs_hack;
      valueabs_hack = 0;
    ;
    break;}
case 61:
#line 622 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in abstract valuetype");
      if (valueabs_hack) {
	valueabs_hack->finishConstruction(0);
	yyval.value_abs_val = valueabs_hack;
	valueabs_hack = 0;
      }
      else yyval.value_abs_val = 0;
    ;
    break;}
case 62:
#line 635 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].value_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.value_val = yyvsp[-3].value_val;
    ;
    break;}
case 63:
#line 642 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 0, yyvsp[-1].id_val,
		     yyvsp[0].valueinheritsupportspec_val->inherits(), yyvsp[0].valueinheritsupportspec_val->supports());
      delete yyvsp[0].valueinheritsupportspec_val;
    ;
    break;}
case 64:
#line 647 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 1, yyvsp[-1].id_val,
		     yyvsp[0].valueinheritsupportspec_val->inherits(), yyvsp[0].valueinheritsupportspec_val->supports());
      delete yyvsp[0].valueinheritsupportspec_val;
    ;
    break;}
case 65:
#line 652 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 0, yyvsp[0].id_val, 0, 0);
    ;
    break;}
case 66:
#line 655 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 1, yyvsp[0].id_val, 0, 0);
    ;
    break;}
case 67:
#line 661 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritsupportspec_val = new ValueInheritSupportSpec(yyvsp[-2].valueinheritspec_val, yyvsp[0].inheritspec_val);
    ;
    break;}
case 68:
#line 664 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritsupportspec_val = new ValueInheritSupportSpec(yyvsp[0].valueinheritspec_val, 0);
    ;
    break;}
case 69:
#line 667 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritsupportspec_val = new ValueInheritSupportSpec(0, yyvsp[0].inheritspec_val);
    ;
    break;}
case 70:
#line 673 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].boolean_val) yyvsp[0].valueinheritspec_val->setTruncatable();
      yyval.valueinheritspec_val = yyvsp[0].valueinheritspec_val;
    ;
    break;}
case 71:
#line 680 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 72:
#line 681 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 73:
#line 685 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritspec_val = new ValueInheritSpec(yyvsp[0].scopedname_val, currentFile, yylineno);
      if (!yyval.valueinheritspec_val->value()) {
	delete yyval.valueinheritspec_val;
	yyval.valueinheritspec_val = 0;
      }
    ;
    break;}
case 74:
#line 692 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-2].valueinheritspec_val) {
	yyvsp[-2].valueinheritspec_val->append(new ValueInheritSpec(yyvsp[0].scopedname_val, currentFile, yylineno),
		   currentFile, yylineno);
	yyval.valueinheritspec_val = yyvsp[-2].valueinheritspec_val;
      }
      else yyval.valueinheritspec_val = new ValueInheritSpec(yyvsp[0].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 75:
#line 703 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.scopedname_val = yyvsp[0].scopedname_val; ;
    break;}
case 76:
#line 707 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 77:
#line 708 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].decl_val) { yyvsp[-1].decl_val->append(yyvsp[0].decl_val); yyval.decl_val = yyvsp[-1].decl_val; }
      else yyval.decl_val = yyvsp[0].decl_val;
    ;
    break;}
case 78:
#line 715 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 79:
#line 716 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].statemember_val; ;
    break;}
case 80:
#line 717 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].factory_val; ;
    break;}
case 81:
#line 721 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.statemember_val = new StateMember(currentFile, yylineno, mainFile,
			   yyvsp[-3].ulong_val, yyvsp[-2].type_spec_val->type(), yyvsp[-2].type_spec_val->constr(), yyvsp[-1].declarator_val);
      delete yyvsp[-2].type_spec_val;
    ;
    break;}
case 82:
#line 729 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.ulong_val = 0; ;
    break;}
case 83:
#line 730 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.ulong_val = 1; ;
    break;}
case 84:
#line 734 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].factory_val->closeParens();
    ;
    break;}
case 85:
#line 736 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-6].factory_val->finishConstruction(yyvsp[-4].parameter_val, yyvsp[-1].raisesspec_val);
      yyval.factory_val = yyvsp[-6].factory_val;
    ;
    break;}
case 86:
#line 740 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].factory_val->closeParens();
    ;
    break;}
case 87:
#line 742 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in factory parameters");
      yyvsp[-5].factory_val->finishConstruction(0, 0);
      yyval.factory_val = yyvsp[-5].factory_val;
    ;
    break;}
case 88:
#line 751 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.factory_val = new Factory(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 89:
#line 757 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = 0; ;
    break;}
case 90:
#line 758 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[0].parameter_val; ;
    break;}
case 91:
#line 762 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[0].parameter_val; ;
    break;}
case 92:
#line 763 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-2].parameter_val) { yyvsp[-2].parameter_val->append(yyvsp[0].parameter_val); yyval.parameter_val = yyvsp[-2].parameter_val; }
      else yyval.parameter_val = yyvsp[0].parameter_val;
    ;
    break;}
case 93:
#line 770 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.parameter_val = new Parameter(currentFile, yylineno, mainFile, 0, yyvsp[-1].type_val, yyvsp[0].id_val);
    ;
    break;}
case 94:
#line 778 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.const_val = new Const(currentFile, yylineno, mainFile, yyvsp[-3].type_val, yyvsp[-2].id_val, yyvsp[0].expr_val);
    ;
    break;}
case 95:
#line 784 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 96:
#line 785 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 97:
#line 786 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 98:
#line 787 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 99:
#line 788 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 100:
#line 789 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 101:
#line 790 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 102:
#line 791 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 103:
#line 792 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 104:
#line 795 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 105:
#line 799 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 106:
#line 803 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 107:
#line 804 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new OrExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 108:
#line 808 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 109:
#line 809 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new XorExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 110:
#line 813 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 111:
#line 814 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new AndExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 112:
#line 820 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 113:
#line 821 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
    yyval.expr_val = new RShiftExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
  ;
    break;}
case 114:
#line 824 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
    yyval.expr_val = new LShiftExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
  ;
    break;}
case 115:
#line 830 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 116:
#line 831 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new AddExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 117:
#line 832 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new SubExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 118:
#line 836 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 119:
#line 837 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new MultExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 120:
#line 840 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new DivExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 121:
#line 843 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new ModExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 122:
#line 849 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].char_val == '-') yyval.expr_val = new MinusExpr(currentFile, yylineno, yyvsp[0].expr_val);
      if (yyvsp[-1].char_val == '+') yyval.expr_val = new PlusExpr(currentFile, yylineno, yyvsp[0].expr_val);
      if (yyvsp[-1].char_val == '~') yyval.expr_val = new InvertExpr(currentFile, yylineno, yyvsp[0].expr_val);
    ;
    break;}
case 123:
#line 854 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 124:
#line 858 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.char_val = '-'; ;
    break;}
case 125:
#line 859 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.char_val = '+'; ;
    break;}
case 126:
#line 860 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.char_val = '~'; ;
    break;}
case 127:
#line 864 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = IdlExpr::scopedNameToExpr(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 128:
#line 867 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 129:
#line 868 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[-1].expr_val; ;
    break;}
case 130:
#line 872 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new IntegerExpr(currentFile, yylineno, yyvsp[0].int_literal_val);
    ;
    break;}
case 131:
#line 875 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new StringExpr(currentFile, yylineno, yyvsp[0].string_val);
    ;
    break;}
case 132:
#line 878 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new WStringExpr(currentFile, yylineno, yyvsp[0].wstring_val);
    ;
    break;}
case 133:
#line 881 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new CharExpr(currentFile, yylineno, yyvsp[0].char_val);
    ;
    break;}
case 134:
#line 884 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new WCharExpr(currentFile, yylineno, yyvsp[0].wchar_val);
    ;
    break;}
case 135:
#line 887 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new FixedExpr(currentFile, yylineno, yyvsp[0].fixed_val);
    ;
    break;}
case 136:
#line 890 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new FloatExpr(currentFile, yylineno, yyvsp[0].float_literal_val);
    ;
    break;}
case 137:
#line 893 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new BooleanExpr(currentFile, yylineno, yyvsp[0].boolean_val);
    ;
    break;}
case 138:
#line 899 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.string_val = yyvsp[0].string_val; ;
    break;}
case 139:
#line 900 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.string_val = new char [strlen(yyvsp[-1].string_val) + strlen(yyvsp[0].string_val) + 1];
      strcpy(yyval.string_val, yyvsp[-1].string_val);
      strcat(yyval.string_val, yyvsp[0].string_val);
      delete [] yyvsp[-1].string_val;
      delete [] yyvsp[0].string_val;
    ;
    break;}
case 140:
#line 910 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.wstring_val = yyvsp[0].wstring_val; ;
    break;}
case 141:
#line 911 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.wstring_val = new IDL_WChar [idl_wstrlen(yyvsp[-1].wstring_val) + idl_wstrlen(yyvsp[0].wstring_val) + 1];
      idl_wstrcpy(yyval.wstring_val, yyvsp[-1].wstring_val);
      idl_wstrcat(yyval.wstring_val, yyvsp[0].wstring_val);
      delete [] yyvsp[-1].wstring_val;
      delete [] yyvsp[0].wstring_val;
    ;
    break;}
case 142:
#line 921 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 143:
#line 922 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 144:
#line 926 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlLongVal v = yyvsp[0].expr_val->evalAsLongV();
      if (v.negative || v.u == 0)
	IdlError(currentFile, yylineno, "Size must be at least 1");
      yyval.ulong_val = v.u;
    ;
    break;}
case 145:
#line 935 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].typedef_val; ;
    break;}
case 146:
#line 936 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].struct_val; ;
    break;}
case 147:
#line 937 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].union_val; ;
    break;}
case 148:
#line 938 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].enum_val; ;
    break;}
case 149:
#line 939 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.decl_val = new Native(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 150:
#line 942 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 151:
#line 946 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.typedef_val = new Typedef(currentFile, yylineno, mainFile,
		       yyvsp[-1].type_spec_val->type(), yyvsp[-1].type_spec_val->constr(), yyvsp[0].declarator_val);
      delete yyvsp[-1].type_spec_val;
    ;
    break;}
case 152:
#line 954 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 153:
#line 955 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 1); ;
    break;}
case 154:
#line 959 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 155:
#line 960 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 156:
#line 961 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 157:
#line 967 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 158:
#line 968 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 159:
#line 969 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 160:
#line 970 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 161:
#line 971 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 162:
#line 972 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 163:
#line 973 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 164:
#line 974 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 165:
#line 975 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 166:
#line 979 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 167:
#line 980 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 168:
#line 981 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 169:
#line 982 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 170:
#line 986 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].struct_val->thisType(); ;
    break;}
case 171:
#line 987 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].union_val->thisType(); ;
    break;}
case 172:
#line 988 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].enum_val->thisType(); ;
    break;}
case 173:
#line 992 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[-1].declarator_val; ;
    break;}
case 174:
#line 993 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].declarator_val) { yyvsp[-4].declarator_val->append(yyvsp[-1].declarator_val); yyval.declarator_val = yyvsp[-4].declarator_val; }
      else yyval.declarator_val = yyvsp[-1].declarator_val;
    ;
    break;}
case 175:
#line 1000 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[0].declarator_val; ;
    break;}
case 176:
#line 1001 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[0].declarator_val; ;
    break;}
case 177:
#line 1005 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.declarator_val = new Declarator(currentFile, yylineno, mainFile, yyvsp[0].id_val, 0);
    ;
    break;}
case 178:
#line 1011 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[0].declarator_val; ;
    break;}
case 179:
#line 1015 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::floatType; ;
    break;}
case 180:
#line 1016 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::doubleType; ;
    break;}
case 181:
#line 1017 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::longdoubleType; ;
    break;}
case 182:
#line 1021 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 183:
#line 1022 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 184:
#line 1026 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 185:
#line 1027 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 186:
#line 1028 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 187:
#line 1032 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::shortType; ;
    break;}
case 188:
#line 1036 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::longType; ;
    break;}
case 189:
#line 1040 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::longlongType; ;
    break;}
case 190:
#line 1044 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 191:
#line 1045 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 192:
#line 1046 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 193:
#line 1050 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::ushortType; ;
    break;}
case 194:
#line 1054 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::ulongType; ;
    break;}
case 195:
#line 1058 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::ulonglongType; ;
    break;}
case 196:
#line 1062 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::charType; ;
    break;}
case 197:
#line 1066 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::wcharType; ;
    break;}
case 198:
#line 1070 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::booleanType; ;
    break;}
case 199:
#line 1074 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::octetType; ;
    break;}
case 200:
#line 1078 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::anyType; ;
    break;}
case 201:
#line 1082 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = DeclaredType::corbaObjectType; ;
    break;}
case 202:
#line 1086 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].struct_val->finishConstruction(yyvsp[-1].member_val);
      yyval.struct_val = yyvsp[-5].struct_val;
    ;
    break;}
case 203:
#line 1090 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in struct definition");
      yyvsp[-1].struct_val->finishConstruction(0);
      yyval.struct_val = yyvsp[-1].struct_val;
    ;
    break;}
case 204:
#line 1099 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.struct_val = new Struct(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 205:
#line 1105 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.member_val = yyvsp[-1].member_val; ;
    break;}
case 206:
#line 1106 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-2].member_val) { yyvsp[-2].member_val->append(yyvsp[-1].member_val); yyval.member_val = yyvsp[-2].member_val; }
      else yyval.member_val = yyvsp[-1].member_val;
    ;
    break;}
case 207:
#line 1113 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.member_val = new Member(currentFile, yylineno, mainFile,
		      yyvsp[-2].type_spec_val->type(), yyvsp[-2].type_spec_val->constr(), yyvsp[-1].declarator_val);
      delete yyvsp[-2].type_spec_val;
    ;
    break;}
case 208:
#line 1118 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in member declaration");
      yyval.member_val = 0;
    ;
    break;}
case 209:
#line 1128 "../../../../../src/tool/omniidl/cxx/idl.yy"
{

      yyvsp[-12].union_val->finishConstruction(yyvsp[-7].type_spec_val->type(), yyvsp[-7].type_spec_val->constr(), yyvsp[-1].union_case_val);
      delete yyvsp[-7].type_spec_val;
      yyval.union_val = yyvsp[-12].union_val;
    ;
    break;}
case 210:
#line 1134 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in union declaration");
      yyvsp[-1].union_val->finishConstruction(0, 0, 0);
      yyval.union_val = yyvsp[-1].union_val;
    ;
    break;}
case 211:
#line 1143 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.union_val = new Union(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 212:
#line 1149 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 213:
#line 1150 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 214:
#line 1151 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 215:
#line 1152 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].enum_val->thisType(), 1); ;
    break;}
case 216:
#line 1153 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_spec_val = new TypeSpec(IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val),
			0);
    ;
    break;}
case 217:
#line 1160 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.union_case_val = yyvsp[0].union_case_val; ;
    break;}
case 218:
#line 1164 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.union_case_val = yyvsp[-1].union_case_val; ;
    break;}
case 219:
#line 1165 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-2].union_case_val->append(yyvsp[-1].union_case_val);
      yyval.union_case_val = yyvsp[-2].union_case_val;
    ;
    break;}
case 220:
#line 1172 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-1].union_case_val->finishConstruction(yyvsp[-2].case_label_val);
      yyval.union_case_val = yyvsp[-1].union_case_val;
    ;
    break;}
case 221:
#line 1179 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.case_label_val = yyvsp[0].case_label_val; ;
    break;}
case 222:
#line 1180 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-1].case_label_val->append(yyvsp[0].case_label_val);
      yyval.case_label_val = yyvsp[-1].case_label_val;
    ;
    break;}
case 223:
#line 1187 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.case_label_val = new CaseLabel(currentFile, yylineno, mainFile, yyvsp[-2].expr_val);
    ;
    break;}
case 224:
#line 1190 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.case_label_val = new CaseLabel(currentFile, yylineno, mainFile, 0);
    ;
    break;}
case 225:
#line 1196 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.union_case_val = new UnionCase(currentFile, yylineno, mainFile,
			 yyvsp[-1].type_spec_val->type(), yyvsp[-1].type_spec_val->constr(), yyvsp[0].declarator_val);
    ;
    break;}
case 226:
#line 1203 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].enum_val->finishConstruction(yyvsp[-1].enumerator_val);
      yyval.enum_val = yyvsp[-5].enum_val;
    ;
    break;}
case 227:
#line 1207 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Syntax error in enum definition");
      yyvsp[-1].enum_val->finishConstruction(0);
      yyval.enum_val = yyvsp[-1].enum_val;
    ;
    break;}
case 228:
#line 1215 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.enum_val = new Enum(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 229:
#line 1221 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.enumerator_val = yyvsp[-1].enumerator_val; ;
    break;}
case 230:
#line 1222 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].enumerator_val->append(yyvsp[-1].enumerator_val);
      yyval.enumerator_val = yyvsp[-4].enumerator_val;
    ;
    break;}
case 231:
#line 1229 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.enumerator_val = new Enumerator(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 232:
#line 1235 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = new SequenceType(yyvsp[-3].type_val, yyvsp[-1].ulong_val);
    ;
    break;}
case 233:
#line 1238 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = new SequenceType(yyvsp[-1].type_val, 0);
    ;
    break;}
case 234:
#line 1244 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = new StringType(yyvsp[-1].ulong_val); ;
    break;}
case 235:
#line 1245 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = StringType::unboundedStringType;
    ;
    break;}
case 236:
#line 1251 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = new WStringType(yyvsp[-1].ulong_val); ;
    break;}
case 237:
#line 1252 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = WStringType::unboundedWStringType;
    ;
    break;}
case 238:
#line 1258 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.declarator_val = new Declarator(currentFile, yylineno, mainFile, yyvsp[-1].id_val, yyvsp[0].array_size_val);
    ;
    break;}
case 239:
#line 1264 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.array_size_val = yyvsp[0].array_size_val; ;
    break;}
case 240:
#line 1265 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-1].array_size_val->append(yyvsp[0].array_size_val);
      yyval.array_size_val = yyvsp[-1].array_size_val;
    ;
    break;}
case 241:
#line 1272 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.array_size_val = new ArraySize(yyvsp[-1].ulong_val); ;
    break;}
case 242:
#line 1276 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.attribute_val = new Attribute(currentFile, yylineno, mainFile, yyvsp[-3].boolean_val, yyvsp[-1].type_val, yyvsp[0].declarator_val);
    ;
    break;}
case 243:
#line 1282 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 244:
#line 1283 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 245:
#line 1287 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[-1].declarator_val; ;
    break;}
case 246:
#line 1288 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].declarator_val) { yyvsp[-4].declarator_val->append(yyvsp[-1].declarator_val); yyval.declarator_val = yyvsp[-4].declarator_val; }
      else yyval.declarator_val = yyvsp[-1].declarator_val;
    ;
    break;}
case 247:
#line 1295 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].exception_val->finishConstruction(yyvsp[-1].member_val);
      yyval.exception_val = yyvsp[-5].exception_val;
    ;
    break;}
case 248:
#line 1299 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in exception definition");
      yyvsp[-1].exception_val->finishConstruction(0);
      yyval.exception_val = yyvsp[-1].exception_val;
    ;
    break;}
case 249:
#line 1308 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.exception_val = new Exception(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 250:
#line 1314 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.member_val = 0; ;
    break;}
case 251:
#line 1315 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].member_val) { yyvsp[-1].member_val->append(yyvsp[0].member_val);	yyval.member_val = yyvsp[-1].member_val; }
      else yyval.member_val = yyvsp[0].member_val;
    ;
    break;}
case 252:
#line 1322 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-2].operation_val->closeParens();
    ;
    break;}
case 253:
#line 1324 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-6].operation_val->finishConstruction(yyvsp[-4].parameter_val, yyvsp[-1].raisesspec_val, yyvsp[0].contextspec_val);
      yyval.operation_val = yyvsp[-6].operation_val;
    ;
    break;}
case 254:
#line 1328 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in operation declaration");
      yyvsp[-1].operation_val->closeParens();
      yyvsp[-1].operation_val->finishConstruction(0, 0, 0);
      yyval.operation_val = yyvsp[-1].operation_val;
    ;
    break;}
case 255:
#line 1338 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.operation_val = new Operation(currentFile, yylineno, mainFile, yyvsp[-2].boolean_val, yyvsp[-1].type_val, yyvsp[0].id_val);
    ;
    break;}
case 256:
#line 1344 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 257:
#line 1345 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = yyvsp[0].boolean_val; ;
    break;}
case 258:
#line 1349 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 259:
#line 1353 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 260:
#line 1354 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::voidType; ;
    break;}
case 261:
#line 1358 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[-1].parameter_val; ;
    break;}
case 262:
#line 1359 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = 0; ;
    break;}
case 263:
#line 1360 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in operation parameters");
      yyval.parameter_val = 0;
    ;
    break;}
case 264:
#line 1368 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[-1].parameter_val; ;
    break;}
case 265:
#line 1369 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].parameter_val) { yyvsp[-4].parameter_val->append(yyvsp[-1].parameter_val); yyval.parameter_val = yyvsp[-4].parameter_val; }
      else yyval.parameter_val = yyvsp[-1].parameter_val;
    ;
    break;}
case 266:
#line 1376 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.parameter_val = new Parameter(currentFile, yylineno, mainFile, yyvsp[-2].int_val, yyvsp[-1].type_val, yyvsp[0].id_val);
    ;
    break;}
case 267:
#line 1382 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 0; ;
    break;}
case 268:
#line 1383 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 1; ;
    break;}
case 269:
#line 1384 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 2; ;
    break;}
case 270:
#line 1388 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.raisesspec_val = 0; ;
    break;}
case 271:
#line 1389 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.raisesspec_val = yyvsp[-1].raisesspec_val; ;
    break;}
case 272:
#line 1393 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.raisesspec_val = yyvsp[-1].raisesspec_val; ;
    break;}
case 273:
#line 1397 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.raisesspec_val = new RaisesSpec(yyvsp[-1].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 274:
#line 1400 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].raisesspec_val->append(new RaisesSpec(yyvsp[-1].scopedname_val, currentFile, yylineno));
      yyval.raisesspec_val = yyvsp[-4].raisesspec_val;
    ;
    break;}
case 275:
#line 1407 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.contextspec_val = 0; ;
    break;}
case 276:
#line 1408 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.contextspec_val = yyvsp[-1].contextspec_val; ;
    break;}
case 277:
#line 1412 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.contextspec_val = yyvsp[-1].contextspec_val; ;
    break;}
case 278:
#line 1416 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.contextspec_val = new ContextSpec(yyvsp[-1].string_val, currentFile, yylineno);
    ;
    break;}
case 279:
#line 1419 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].contextspec_val->append(new ContextSpec(yyvsp[-1].string_val, currentFile, yylineno));
      yyval.contextspec_val = yyvsp[-4].contextspec_val;
    ;
    break;}
case 280:
#line 1426 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 281:
#line 1427 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 282:
#line 1428 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 283:
#line 1429 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 284:
#line 1435 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlLongVal scalev = yyvsp[-1].expr_val->evalAsLongV();

      if (scalev.negative) {
	IdlError(currentFile, yylineno,
		 "Fixed point scale must be >= 0");
      }
      IDL_ULong scale = scalev.u;

      if (yyvsp[-3].ulong_val > 31) {
	IdlError(currentFile, yylineno,
		 "Fixed point values may not have more than 31 digits");
      }
      if (scale > yyvsp[-3].ulong_val) {
	IdlError(currentFile, yylineno,
		 "Fixed point scale factor is greater than "
		 "the number of digits");
      }
      yyval.type_val = new FixedType(yyvsp[-3].ulong_val, scale);
    ;
    break;}
case 285:
#line 1458 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = new FixedType(0, 0);
    ;
    break;}
case 286:
#line 1464 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = new DeclaredType(IdlType::tk_value, 0, 0); ;
    break;}
case 287:
#line 1468 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.decl_val = new StructForward(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 288:
#line 1471 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.decl_val = new UnionForward(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 297:
#line 1494 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      Prefix::setPrefix(idl_strdup(yyvsp[-1].string_val));
    ;
    break;}
case 298:
#line 1497 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Malformed #pragma prefix");
    ;
    break;}
case 299:
#line 1503 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      Decl* d = Decl::scopedNameToDecl(currentFile, yylineno, yyvsp[-2].scopedname_val);
      if (d) DeclRepoId::setRepoId(d, yyvsp[-1].string_val, currentFile, yylineno);
    ;
    break;}
case 300:
#line 1507 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Malformed #pragma id");
    ;
    break;}
case 301:
#line 1513 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      Decl* d = Decl::scopedNameToDecl(currentFile, yylineno, yyvsp[-4].scopedname_val);
      if (d) DeclRepoId::setVersion(d, yyvsp[-3].int_literal_val, yyvsp[-1].int_literal_val, currentFile, yylineno);
    ;
    break;}
case 302:
#line 1517 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Malformed #pragma version");
    ;
    break;}
case 303:
#line 1523 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      Pragma::add(yyvsp[-1].string_val, currentFile, yylineno-1);
    ;
    break;}
case 304:
#line 1529 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      Pragma::add(yyvsp[-1].string_val, currentFile, yylineno);
    ;
    break;}
case 305:
#line 1535 "../../../../../src/tool/omniidl/cxx/idl.yy"
{ yyval.string_val = yyvsp[0].string_val; ;
    break;}
case 306:
#line 1536 "../../../../../src/tool/omniidl/cxx/idl.yy"
{
      yyval.string_val = new char [strlen(yyvsp[-1].string_val) + strlen(yyvsp[0].string_val) + 1];
      strcpy(yyval.string_val, yyvsp[-1].string_val);
      strcat(yyval.string_val, yyvsp[0].string_val);
      delete [] yyvsp[-1].string_val;
      delete [] yyvsp[0].string_val;
    ;
    break;}
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1545 "../../../../../src/tool/omniidl/cxx/idl.yy"

