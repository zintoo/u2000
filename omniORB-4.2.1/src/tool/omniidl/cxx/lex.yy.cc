/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 99
#define YY_END_OF_BUFFER 100
static yyconst short int yy_acclist[506] =
    {   0,
       78,   78,  100,   98,   99,   97,   98,   99,   97,   99,
       98,   99,   98,   99,   98,   99,   98,   99,   57,   98,
       99,   54,   98,   99,   98,   99,   98,   99,   98,   99,
       52,   98,   99,   52,   98,   99,   52,   98,   99,   52,
       98,   99,   52,   98,   99,   52,   98,   99,   98,   99,
       98,   99,   52,   98,   99,   52,   98,   99,   52,   98,
       99,   52,   98,   99,   52,   98,   99,   52,   98,   99,
       52,   98,   99,   52,   98,   99,   52,   98,   99,   52,
       98,   99,   52,   98,   99,   52,   98,   99,   52,   98,
       99,   52,   98,   99,   52,   98,   99,   52,   98,   99,

       52,   98,   99,   52,   98,   99,   97,   98,   99,   98,
       99,   78,   99,   80,   99,   79,   99,   89,   98,   99,
       93,   99,   98,   99,   98,   99,   57,   98,   99,   54,
       98,   99,   89,   98,   99,   91,   99,   99,   99,   84,
       99,   85,   99,   71,   69,   77,   70,   55,   75,   54,
       51,   49,   50,   52,   52,   52,   52,   52,   92,   53,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   18,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   78,

       79,   79,   81,   89,   93,   55,   54,   89,   91,   84,
       85,   71,   58,   58,   74,   76,   69,   70,   73,   68,
       56,   52,   72,   52,   52,   52,   53,   52,    2,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   28,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       96,   62,   59,   62,   69,   73,   74,   70,   52,   72,
       63,   63,   52,   39,   52,   52,   52,   52,   52,    5,
       52,    6,   52,   52,   52,   52,   52,   52,   12,   52,

       52,   52,   52,   52,   52,   52,   52,   22,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   46,   52,
       52,   52,   59,   61,   60,   69,   70,   15,   52,   67,
       64,   67,   52,   52,   52,   52,   52,    7,   52,   52,
       52,   52,   52,   52,   52,   16,   52,   17,   52,   19,
       52,   52,   21,   52,   52,   52,   26,   52,   52,   52,
       52,   52,   52,   52,   34,   52,   52,   52,   52,   52,
       52,   52,   42,   52,   52,   52,   47,   52,   52,   64,
       66,   65,   25,   52,   52,   52,   52,   52,   52,    9,

       52,   52,   11,   52,   52,   52,   52,   23,   52,   24,
       52,   27,   52,   52,   30,   52,   31,   52,   52,   52,
       35,   52,   36,   52,   52,   38,   52,   52,   52,   52,
       52,   52,   95,   52,   52,   52,    4,   52,    8,   52,
       10,   52,   52,   14,   52,   52,   29,   52,   52,   52,
       52,   52,   41,   52,   52,   52,   48,   52,   94,   95,
       95,   90,   52,    1,   52,   52,   52,   52,   32,   52,
       33,   52,   37,   52,   52,   43,   52,   52,   94,   94,
       95,   90,   44,   52,    3,   52,   13,   52,   20,   52,
       52,   45,   52,   94,   87,   52,   87,   40,   52,   86,

       82,   86,   88,   88,   83
    } ;

static yyconst short int yy_accept[492] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    4,    6,    9,   11,   13,   15,   17,   19,   22,
       25,   27,   29,   31,   34,   37,   40,   43,   46,   49,
       51,   53,   56,   59,   62,   65,   68,   71,   74,   77,
       80,   83,   86,   89,   92,   95,   98,  101,  104,  107,
      110,  112,  114,  116,  118,  121,  123,  125,  127,  130,
      133,  136,  138,  139,  140,  142,  144,  144,  145,  145,
      145,  145,  146,  147,  147,  148,  149,  149,  150,  150,
      150,  151,  152,  153,  154,  155,  156,  156,  156,  157,
      158,  159,  160,  160,  161,  161,  162,  163,  164,  165,

      166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
      176,  178,  179,  180,  181,  182,  183,  184,  185,  186,
      187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
      197,  198,  199,  200,  200,  200,  200,  200,  200,  201,
      202,  203,  204,  205,  206,  206,  206,  207,  207,  208,
      209,  210,  210,  211,  212,  212,  213,  214,  214,  215,
      215,  215,  215,  216,  216,  216,  217,  219,  220,  220,
      220,  221,  222,  223,  223,  224,  224,  224,  224,  225,
      226,  227,  228,  228,  229,  231,  232,  233,  234,  235,
      236,  237,  238,  239,  240,  241,  242,  243,  244,  245,

      246,  247,  248,  249,  250,  251,  252,  254,  255,  256,
      257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
      267,  268,  269,  270,  271,  271,  272,  272,  272,  272,
      272,  273,  275,  275,  275,  275,  275,  276,  278,  278,
      278,  279,  280,  281,  282,  282,  283,  283,  283,  283,
      284,  286,  287,  287,  288,  289,  290,  292,  294,  295,
      296,  297,  298,  299,  301,  302,  303,  304,  305,  306,
      307,  308,  310,  311,  312,  313,  314,  315,  316,  317,
      318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
      328,  329,  331,  332,  333,  333,  333,  333,  333,  334,

      334,  335,  335,  336,  336,  336,  338,  340,  341,  343,
      343,  343,  343,  344,  345,  345,  346,  347,  348,  350,
      351,  352,  353,  354,  355,  356,  358,  360,  362,  363,
      365,  366,  367,  369,  370,  371,  372,  373,  374,  375,
      377,  378,  379,  380,  381,  382,  383,  385,  386,  387,
      389,  390,  390,  390,  390,  390,  390,  390,  391,  391,
      392,  392,  393,  393,  395,  396,  396,  397,  398,  399,
      400,  402,  403,  405,  406,  407,  408,  410,  412,  414,
      415,  417,  419,  420,  421,  423,  425,  426,  428,  429,
      430,  431,  432,  433,  433,  434,  434,  434,  434,  434,

      434,  435,  435,  436,  437,  439,  441,  443,  444,  446,
      447,  449,  450,  451,  452,  453,  455,  456,  457,  459,
      459,  461,  461,  461,  462,  463,  463,  463,  464,  464,
      466,  467,  468,  469,  471,  473,  475,  476,  478,  479,
      479,  480,  480,  482,  482,  483,  483,  483,  483,  483,
      485,  485,  487,  489,  491,  492,  494,  494,  495,  496,
      496,  496,  496,  496,  497,  498,  498,  498,  498,  498,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  501,
      501,  501,  502,  503,  504,  504,  505,  505,  505,  506,
      506

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    6,    7,    1,    1,    1,    8,    1,
        1,    9,   10,    1,   10,   11,   12,   13,   14,   14,
       14,   14,   14,   14,   14,   15,   15,   16,    1,   17,
        1,   18,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   25,   26,   25,   25,   27,   25,   25,   28,   25,
       25,   29,   30,   31,   32,   33,   25,   34,   25,   25,
        1,   35,    1,    1,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   25,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   25,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[61] =
    {   0,
        1,    2,    3,    2,    4,    1,    1,    5,    6,    1,
        1,    1,    7,    7,    7,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    1,    9,    8,    8,    8,    8,
        8,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9
    } ;

static yyconst short int yy_base[522] =
    {   0,
        0,   59,   59,   60,   68,   73,   62,   86,   90,   96,
      923,  924,  924,  924,   68,  887,   91,   98,  111,  116,
      905,  903,  901,    0,  899,  103,  879,  887,  878,  109,
      878,   47,  863,   91,   67,   64,   95,  863,  861,  860,
      872,   97,   62,   79,  117,   84,  859,  112,  109,  148,
      152,    0,  924,  159,  905,  924,  903,  163,  168,  173,
      157,  870,  901,  186,    0,  194,   84,  924,  174,  895,
      192,  197,  924,  899,  201,  221,  241,  924,  255,    0,
      261,  924,  924,  924,    0,  874,  186,  865,  853,  866,
      850,  924,  893,    0,  845,  840,  833,  837,  841,  836,

      852,  839,  833,  844,  829,  828,  844,  843,  822,  830,
      119,  155,  839,  823,  822,  835,  820,  829,  835,  827,
      834,  818,  819,  815,  816,  821,  809,  813,  172,  816,
      817,  817,  805,  226,  244,  264,  283,  806,    0,  213,
      238,  924,  856,  924,  277,  290,  296,  309,  324,  238,
      822,    0,    0,  323,  820,  225,  924,  847,  846,  280,
      845,  844,  924,  319,  848,  924,  328,  924,  342,  347,
      352,    0,  820,  265,  924,  281,  841,  340,  807,  824,
      790,    0,  797,  789,    0,  790,  795,  800,  787,  259,
      784,  801,  799,  788,  794,  779,  792,  795,  775,  789,

      792,  785,  771,  781,  784,  766,    0,  766,  775,  767,
      780,  763,  765,  162,  766,  761,  766,  773,  763,  767,
      755,  770,  772,  755,  368,  924,  370,  770,  364,  756,
      924,  924,  367,  797,  796,  374,  377,  924,  387,  380,
      392,  780,  338,  924,  794,  793,  395,  792,  791,  759,
        0,  756,  747,  742,  749,  752,    0,    0,  737,  750,
      740,  733,  741,    0,  736,  736,  745,  729,  728,  729,
      734,    0,  733,  722,  723,  740,  739,  730,  733,  723,
      731,  716,  721,  730,  718,  728,  727,  725,  715,  720,
      721,    0,  708,  715,  341,  247,  716,  710,  924,  749,

      924,  748,  924,  747,  397,  400,    0,  924,  924,  408,
      746,  745,  697,  731,  705,  712,  710,  710,    0,  687,
      697,  697,  702,  687,  688,    0,    0,    0,  698,    0,
      698,  697,    0,  677,  681,  696,  680,  684,  683,    0,
      688,  675,  676,  684,  690,  685,    0,  676,  669,    0,
      674,  392,  415,  413,  674,  672,  712,  924,  711,  924,
      710,  924,  709,    0,  679,  679,  675,  657,  663,  656,
        0,  655,    0,  664,  648,  670,    0,    0,    0,  663,
        0,    0,  653,  657,    0,    0,  637,    0,  633,  642,
      630,  607,  620,  421,  924,  423,  622,  606,  638,  634,

      577,  551,  539,  538,    0,    0,    0,  542,    0,  546,
        0,  524,  534,  515,  529,    0,  512,  461,    0,  428,
      924,  436,  450,  422,  418,  475,  502,  468,  455,    0,
      466,  457,  463,    0,    0,    0,  465,    0,  460,  430,
      924,  464,  439,  478,  445,  478,  445,  456,  454,    0,
      457,    0,    0,    0,  443,    0,  470,  448,  480,  427,
      402,  397,  397,  396,  380,  321,  304,  305,  292,    0,
      276,  274,  257,  269,  230,  230,  220,  457,  265,  190,
      192,  484,  199,  191,  142,  158,   95,   27,  924,  924,
      513,  522,  531,  540,  549,  552,  554,  563,  572,  581,

      590,  599,  608,  611,  619,  628,  631,  636,  640,  648,
      653,  657,  661,  665,  673,  678,  682,  686,  690,  694,
      698
    } ;

static yyconst short int yy_def[522] =
    {   0,
      490,    1,  491,  491,    1,    1,  492,  492,  493,  493,
      490,  490,  490,  490,  494,  495,  490,  490,  490,  490,
      490,  490,  490,  496,  496,  496,  496,  496,  496,  490,
      497,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  490,
      490,  498,  490,  499,  490,  490,  490,  490,  490,  490,
      490,  500,  490,  500,  501,  490,  494,  490,  494,  490,
      502,  490,  490,  503,  490,  490,  490,  490,  490,  504,
      490,  490,  490,  490,  496,  496,  505,  506,  496,  496,
      496,  490,  490,  507,  490,  496,  496,  496,  496,  496,

      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  490,  490,  490,  490,  490,  498,  499,
      499,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      500,  500,  501,  490,  490,  494,  490,  490,  490,  490,
      508,  509,  490,  490,  503,  490,  490,  490,  490,  490,
      490,  504,  496,  505,  490,  505,  490,  510,  496,  496,
      496,  507,  490,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,

      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  511,  512,  490,  490,  490,  490,  490,
      490,  496,  505,  490,  490,  490,  490,  513,  514,  496,
      496,  496,  490,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  515,  490,  490,  490,  490,  490,

      490,  516,  490,  490,  490,  490,  496,  490,  490,  490,
      517,  518,  496,  496,  490,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  515,  490,  515,  490,  490,  519,  490,  490,  490,
      520,  490,  490,  496,  496,  490,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  490,  490,  515,  490,  490,  490,  521,

      496,  490,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  490,
      490,  490,  515,  515,  490,  490,  490,  496,  490,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  490,
      490,  515,  515,  515,  490,  490,  490,  490,  490,  496,
      490,  496,  496,  496,  496,  496,  515,  515,  490,  490,
      490,  490,  490,  496,  490,  490,  490,  490,  490,  496,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,    0,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,

      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490
    } ;

static yyconst short int yy_nxt[985] =
    {   0,
       12,   13,   14,   13,   13,   15,   12,   16,   12,   12,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       24,   24,   24,   25,   24,   24,   26,   27,   24,   24,
       28,   24,   29,   24,   30,   31,   32,   33,   34,   35,
       36,   37,   24,   24,   38,   24,   39,   40,   41,   42,
       43,   24,   44,   45,   46,   47,   48,   49,   24,   24,
       50,   53,   53,  489,   56,   51,   63,   54,   54,   55,
       56,   12,   57,   68,   61,   56,   12,   57,   58,   51,
       59,   60,   60,   58,   96,   59,   60,   60,   56,   68,
       63,   66,   66,   66,   66,   97,   64,   66,   66,   66,

       66,   98,   69,   72,   72,   72,   73,  104,   87,   74,
       88,   92,  106,   93,  118,  120,  105,  119,   69,  121,
       64,   75,  107,   76,   76,   77,   75,  100,   81,   81,
       81,  108,   78,   79,  101,  115,  127,   78,   79,  109,
      102,  110,  488,  128,   80,  116,  103,  132,  130,  134,
       78,   79,  117,  136,  135,   78,   79,  122,  150,  486,
      123,  131,  133,  135,  137,  137,  137,  141,  199,   80,
      142,  124,  125,  200,  126,  145,  145,  145,  146,  156,
      147,  147,  148,  146,  487,  149,  149,  149,   92,   78,
       93,  175,  486,  201,   78,  154,  154,  154,  154,  159,

      483,   80,  138,  202,  160,  160,  283,   78,   69,   72,
       72,   72,   78,  167,  167,  167,  219,  284,  163,  164,
      176,  490,  168,  169,  490,  220,   80,  134,  485,  155,
       68,   75,  135,   76,   76,   77,  163,  164,  484,  150,
      168,  169,   78,   79,  135,  136,  141,  161,  296,  142,
      162,   75,  295,   77,   77,   77,  137,  137,  137,   69,
       78,   79,   78,   79,  170,  136,  483,  171,  171,  171,
      175,   75,  481,   81,   81,   81,  137,  137,  137,  480,
       78,   79,   78,   79,  225,  226,  243,  232,  479,  145,
      145,  145,  233,  233,  138,  227,  227,  227,  163,  176,

       78,   79,  229,  229,  229,  478,  146,  477,  147,  147,
      148,  168,  259,  260,  138,  176,  163,   78,  476,  146,
      475,  148,  148,  148,  154,  154,  154,  154,  236,  168,
       78,  237,  237,  237,  146,   78,  149,  149,  149,  474,
      167,  167,  167,  175,  473,   78,  353,  246,   78,  238,
      239,  240,  247,  247,  241,  241,  241,  472,  155,  171,
      171,  171,  471,   78,  171,  171,  171,  238,  239,  225,
      226,  296,  176,  295,  299,  354,  229,  229,  229,  300,
      300,  465,  227,  227,  227,  238,  237,  237,  237,  237,
      237,  237,  241,  241,  241,  248,  305,  353,  249,  306,

      306,  306,  309,  238,  241,  241,  241,  310,  310,  306,
      306,  306,  306,  306,  306,  358,  394,  395,  396,  445,
      359,  359,  420,  421,  423,  424,  354,  353,  353,  420,
      421,  440,  441,  422,  422,  422,  470,  440,  441,  469,
      422,  422,  422,  446,  353,  468,  445,  354,  422,  422,
      422,  442,  443,  353,  467,  353,  354,  354,  482,  482,
      482,  482,  444,  444,  444,  442,  443,  466,  447,  353,
      446,  457,  458,  354,  448,  353,  444,  444,  444,  457,
      458,  465,  354,  353,  354,  482,  482,  482,  482,  464,
      444,  444,  444,  463,  462,  447,  461,  460,  354,  459,

      456,  448,  455,  454,  354,  453,  452,  451,  450,  360,
      449,  439,  354,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   70,
       70,  438,   70,   70,   70,   70,   70,   70,   85,   85,
       85,   94,   94,  139,  139,  437,  139,  139,  436,  139,
      139,  139,  140,  140,  435,  140,  140,  140,  140,  140,
      140,  151,  151,  434,  433,  151,  151,  151,  151,  151,
      153,  432,  431,  430,  153,  153,  153,  153,  153,  158,

      158,  429,  158,  158,  158,  158,  158,  158,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  172,  172,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  177,  177,
      428,  177,  177,  177,  177,  177,  177,  182,  182,  182,
      234,  360,  234,  234,  235,  301,  235,  235,  245,  245,
      426,  245,  245,  245,  245,  245,  245,  302,  425,  302,
      302,  304,  419,  304,  304,  311,  418,  311,  311,  312,
      417,  312,  312,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  357,  416,  357,  357,  361,  415,  361,  361,
      363,  414,  363,  363,  399,  413,  399,  399,  400,  412,

      400,  400,  427,  411,  427,  427,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  362,  360,  358,  301,
      398,  397,  393,  392,  391,  390,  389,  388,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  368,  367,  366,
      365,  364,  362,  360,  303,  301,  299,  356,  355,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  308,  308,

      308,  308,  307,  303,  301,  298,  297,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
      269,  268,  267,  266,  265,  264,  263,  262,  261,  258,
      257,  256,  255,  254,  253,  252,  251,  250,  244,  242,
      166,  231,  231,  231,  231,  230,  152,  143,  228,  224,
      223,  222,  221,  218,  217,  216,  215,  214,  213,  212,
      211,  210,  209,  208,  207,  206,  205,  204,  203,  198,
      197,  196,  195,  194,  193,  192,  191,  190,  189,  188,
      187,  186,  185,  184,  183,   92,  181,  180,  179,  178,

      173,  166,  157,  144,  152,  144,  143,  129,  114,  113,
      112,  111,   99,   95,   91,   90,   89,   86,   84,   83,
       82,   71,  490,   11,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490
    } ;

static yyconst short int yy_chk[985] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    3,    4,  488,    7,    2,    7,    3,    4,    5,
        5,    5,    5,   15,    6,    6,    6,    6,    5,    6,
        5,    5,    5,    6,   32,    6,    6,    6,    8,   67,
        8,    9,    9,    9,    9,   32,    7,   10,   10,   10,

       10,   32,   15,   17,   17,   17,   18,   35,   26,   18,
       26,   30,   36,   30,   43,   44,   35,   43,   67,   44,
        8,   19,   36,   19,   19,   19,   20,   34,   20,   20,
       20,   37,   19,   19,   34,   42,   46,   20,   20,   37,
       34,   37,  487,   46,   19,   42,   34,   49,   48,   50,
       19,   19,   42,   51,   50,   20,   20,   45,   61,  486,
       45,   48,   49,   61,   51,   51,   51,   54,  111,   19,
       54,   45,   45,  111,   45,   58,   58,   58,   59,   69,
       59,   59,   59,   60,  485,   60,   60,   60,   64,   59,
       64,   87,  484,  112,   60,   66,   66,   66,   66,   71,

      483,   59,   51,  112,   71,   71,  214,   59,   69,   72,
       72,   72,   60,   75,   75,   75,  129,  214,   72,   72,
       87,  140,   75,   75,  140,  129,   59,  134,  481,   66,
      156,   76,  134,   76,   76,   76,   72,   72,  480,  150,
       75,   75,   76,   76,  150,  135,  141,   71,  296,  141,
       71,   77,  296,   77,   77,   77,  135,  135,  135,  156,
       76,   76,   77,   77,   79,  136,  479,   79,   79,   79,
      174,   81,  477,   81,   81,   81,  136,  136,  136,  476,
       77,   77,   81,   81,  137,  137,  176,  160,  475,  145,
      145,  145,  160,  160,  135,  137,  137,  137,  145,  174,

       81,   81,  146,  146,  146,  474,  147,  473,  147,  147,
      147,  146,  190,  190,  136,  176,  145,  147,  472,  148,
      471,  148,  148,  148,  154,  154,  154,  154,  164,  146,
      148,  164,  164,  164,  149,  147,  149,  149,  149,  469,
      167,  167,  167,  243,  468,  149,  295,  178,  148,  167,
      167,  169,  178,  178,  169,  169,  169,  467,  154,  170,
      170,  170,  466,  149,  171,  171,  171,  167,  167,  225,
      225,  227,  243,  225,  233,  295,  229,  229,  229,  233,
      233,  465,  227,  227,  227,  229,  236,  236,  236,  237,
      237,  237,  240,  240,  240,  178,  239,  352,  178,  239,

      239,  239,  247,  229,  241,  241,  241,  247,  247,  305,
      305,  305,  306,  306,  306,  310,  353,  353,  354,  425,
      310,  310,  394,  394,  396,  396,  352,  424,  396,  420,
      420,  440,  440,  394,  394,  394,  464,  422,  422,  463,
      420,  420,  420,  425,  443,  462,  445,  354,  422,  422,
      422,  423,  423,  458,  461,  423,  424,  396,  478,  478,
      478,  478,  423,  423,  423,  442,  442,  460,  425,  442,
      445,  457,  457,  443,  425,  457,  442,  442,  442,  444,
      444,  459,  458,  444,  423,  482,  482,  482,  482,  455,
      444,  444,  444,  451,  449,  445,  448,  447,  442,  446,

      439,  445,  437,  433,  457,  432,  431,  429,  428,  427,
      426,  418,  444,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  495,
      495,  417,  495,  495,  495,  495,  495,  495,  496,  496,
      496,  497,  497,  498,  498,  415,  498,  498,  414,  498,
      498,  498,  499,  499,  413,  499,  499,  499,  499,  499,
      499,  500,  500,  412,  410,  500,  500,  500,  500,  500,
      501,  408,  404,  403,  501,  501,  501,  501,  501,  502,

      502,  402,  502,  502,  502,  502,  502,  502,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  504,  504,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  506,  506,
      401,  506,  506,  506,  506,  506,  506,  507,  507,  507,
      508,  400,  508,  508,  509,  399,  509,  509,  510,  510,
      398,  510,  510,  510,  510,  510,  510,  511,  397,  511,
      511,  512,  393,  512,  512,  513,  392,  513,  513,  514,
      391,  514,  514,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  516,  390,  516,  516,  517,  389,  517,  517,
      518,  387,  518,  518,  519,  384,  519,  519,  520,  383,

      520,  520,  521,  380,  521,  521,  376,  375,  374,  372,
      370,  369,  368,  367,  366,  365,  363,  361,  359,  357,
      356,  355,  351,  349,  348,  346,  345,  344,  343,  342,
      341,  339,  338,  337,  336,  335,  334,  332,  331,  329,
      325,  324,  323,  322,  321,  320,  318,  317,  316,  315,
      314,  313,  312,  311,  304,  302,  300,  298,  297,  294,
      293,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      271,  270,  269,  268,  267,  266,  265,  263,  262,  261,
      260,  259,  256,  255,  254,  253,  252,  250,  249,  248,

      246,  245,  242,  235,  234,  230,  228,  224,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  213,  212,  211,
      210,  209,  208,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  197,  196,  195,  194,  193,  192,  191,  189,
      188,  187,  186,  184,  183,  181,  180,  179,  177,  173,
      165,  162,  161,  159,  158,  155,  151,  143,  138,  133,
      132,  131,  130,  128,  127,  126,  125,  124,  123,  122,
      121,  120,  119,  118,  117,  116,  115,  114,  113,  110,
      109,  108,  107,  106,  105,  104,  103,  102,  101,  100,
       99,   98,   97,   96,   95,   93,   91,   90,   89,   88,

       86,   74,   70,   63,   62,   57,   55,   47,   41,   40,
       39,   38,   33,   31,   29,   28,   27,   25,   23,   22,
       21,   16,   11,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../../../src/tool/omniidl/cxx/idl.ll"
#define INITIAL 0
#line 2 "../../../../../src/tool/omniidl/cxx/idl.ll"
//                          Package   : omniidl
// idl.ll                   Created on: 1999/10/05
//			    Author    : Duncan Grisby (dpg1)
//
//    Copyright (C) 1999 AT&T Laboratories Cambridge
//
//  This file is part of omniidl.
//
//  omniidl is free software; you can redistribute it and/or modify it
//  under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
//  02111-1307, USA.
//
// Description:
//   
//   Flex lexical analyser

#define YY_NEVER_INTERACTIVE 1

#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>

#include <idlerr.h>
#include <idlutil.h>
#include <idlrepoId.h>
#include <idlscope.h>
#include <idlexpr.h>
#include <idlast.h>

#include <y.tab.h>

char*       currentFile;
IDL_Boolean mainFile  = 1; // Are we processing the main file
int         nestDepth = 0; // #include nesting depth

char octalToChar(char* s);
char hexToChar(char* s);
char escapeToChar(char* s);
IDL_UShort octalToWChar(char* s);
IDL_UShort hexToWChar(char* s);
IDL_UShort escapeToWChar(char* s);
char* escapedStringToString(char* s);
IDL_UShort* escapedStringToWString(char* s);
void parseLineDirective(char* s);

#define comment 1

#define known_pragma 2

#define unknown_pragma 3

#define omni_pragma 4


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 158 "../../../../../src/tool/omniidl/cxx/idl.ll"



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 491 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 924 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 160 "../../../../../src/tool/omniidl/cxx/idl.ll"
return ABSTRACT;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 161 "../../../../../src/tool/omniidl/cxx/idl.ll"
return ANY;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 162 "../../../../../src/tool/omniidl/cxx/idl.ll"
return ATTRIBUTE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 163 "../../../../../src/tool/omniidl/cxx/idl.ll"
return BOOLEAN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 164 "../../../../../src/tool/omniidl/cxx/idl.ll"
return CASE;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 165 "../../../../../src/tool/omniidl/cxx/idl.ll"
return CHAR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 166 "../../../../../src/tool/omniidl/cxx/idl.ll"
return CONST;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 167 "../../../../../src/tool/omniidl/cxx/idl.ll"
return CONTEXT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 168 "../../../../../src/tool/omniidl/cxx/idl.ll"
return CUSTOM;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 169 "../../../../../src/tool/omniidl/cxx/idl.ll"
return DEFAULT;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 170 "../../../../../src/tool/omniidl/cxx/idl.ll"
return DOUBLE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 171 "../../../../../src/tool/omniidl/cxx/idl.ll"
return ENUM;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 172 "../../../../../src/tool/omniidl/cxx/idl.ll"
return EXCEPTION;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 173 "../../../../../src/tool/omniidl/cxx/idl.ll"
return FACTORY;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 174 "../../../../../src/tool/omniidl/cxx/idl.ll"
return FALSE_;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 175 "../../../../../src/tool/omniidl/cxx/idl.ll"
return FIXED;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 176 "../../../../../src/tool/omniidl/cxx/idl.ll"
return FLOAT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 177 "../../../../../src/tool/omniidl/cxx/idl.ll"
return IN;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 178 "../../../../../src/tool/omniidl/cxx/idl.ll"
return INOUT;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 179 "../../../../../src/tool/omniidl/cxx/idl.ll"
return INTERFACE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 180 "../../../../../src/tool/omniidl/cxx/idl.ll"
return LOCAL;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 181 "../../../../../src/tool/omniidl/cxx/idl.ll"
return LONG;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 182 "../../../../../src/tool/omniidl/cxx/idl.ll"
return MODULE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 183 "../../../../../src/tool/omniidl/cxx/idl.ll"
return NATIVE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 184 "../../../../../src/tool/omniidl/cxx/idl.ll"
return OBJECT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 185 "../../../../../src/tool/omniidl/cxx/idl.ll"
return OCTET;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 186 "../../../../../src/tool/omniidl/cxx/idl.ll"
return ONEWAY;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 187 "../../../../../src/tool/omniidl/cxx/idl.ll"
return OUT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 188 "../../../../../src/tool/omniidl/cxx/idl.ll"
return PRIVATE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 189 "../../../../../src/tool/omniidl/cxx/idl.ll"
return PUBLIC;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 190 "../../../../../src/tool/omniidl/cxx/idl.ll"
return RAISES;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 191 "../../../../../src/tool/omniidl/cxx/idl.ll"
return READONLY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 192 "../../../../../src/tool/omniidl/cxx/idl.ll"
return SEQUENCE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 193 "../../../../../src/tool/omniidl/cxx/idl.ll"
return SHORT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 194 "../../../../../src/tool/omniidl/cxx/idl.ll"
return STRING;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 195 "../../../../../src/tool/omniidl/cxx/idl.ll"
return STRUCT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 196 "../../../../../src/tool/omniidl/cxx/idl.ll"
return SUPPORTS;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 197 "../../../../../src/tool/omniidl/cxx/idl.ll"
return SWITCH;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 198 "../../../../../src/tool/omniidl/cxx/idl.ll"
return TRUE_;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 199 "../../../../../src/tool/omniidl/cxx/idl.ll"
return TRUNCATABLE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 200 "../../../../../src/tool/omniidl/cxx/idl.ll"
return TYPEDEF;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 201 "../../../../../src/tool/omniidl/cxx/idl.ll"
return UNION;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 202 "../../../../../src/tool/omniidl/cxx/idl.ll"
return UNSIGNED;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 203 "../../../../../src/tool/omniidl/cxx/idl.ll"
return VALUEBASE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 204 "../../../../../src/tool/omniidl/cxx/idl.ll"
return VALUETYPE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 205 "../../../../../src/tool/omniidl/cxx/idl.ll"
return VOID;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 206 "../../../../../src/tool/omniidl/cxx/idl.ll"
return WCHAR;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 207 "../../../../../src/tool/omniidl/cxx/idl.ll"
return WSTRING;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 209 "../../../../../src/tool/omniidl/cxx/idl.ll"
return LEFT_SHIFT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 210 "../../../../../src/tool/omniidl/cxx/idl.ll"
return RIGHT_SHIFT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 211 "../../../../../src/tool/omniidl/cxx/idl.ll"
return SCOPE_DELIM;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 213 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.id_val = idl_strdup(yytext);
  return IDENTIFIER;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 218 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.id_val = idl_strdup(yytext);
  return IDENTIFIER;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 223 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  errno = 0;
  yylval.int_literal_val = idl_strtoul(yytext, 10);
  if (errno == ERANGE) {
    IdlError(currentFile, yylineno,
	     "Integer literal '%s' is too big", yytext);
  }
  return INTEGER_LITERAL;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 233 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  errno = 0;
  yylval.int_literal_val = idl_strtoul(yytext, 8);
  if (errno == ERANGE) {
    IdlError(currentFile, yylineno,
	     "Integer literal '%s' is too big", yytext);
  }
  return INTEGER_LITERAL;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 243 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  errno = 0;
  yylval.int_literal_val = idl_strtoul(yytext, 16);
  if (errno == ERANGE) {
    IdlError(currentFile, yylineno,
	     "Integer literal '%s' is too big", yytext);
  }
  return INTEGER_LITERAL;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 253 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.int_literal_val = 0;
  return INTEGER_LITERAL;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 258 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.char_val = yytext[1];
  return CHARACTER_LITERAL;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 263 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.char_val = octalToChar(yytext + 1);
  return CHARACTER_LITERAL;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 269 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.char_val = hexToChar(yytext + 1);
  return CHARACTER_LITERAL;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 275 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  IdlError(currentFile, yylineno,
	   "\\u may only be used in wide characters and strings");
  yylval.char_val = 0;
  return CHARACTER_LITERAL;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 282 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.char_val = escapeToChar(yytext + 1);
  return CHARACTER_LITERAL;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 288 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.wchar_val = yytext[2];
  return WIDE_CHARACTER_LITERAL;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 293 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.wchar_val = octalToWChar(yytext + 2);
  return WIDE_CHARACTER_LITERAL;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 299 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.wchar_val = hexToWChar(yytext + 2);
  return WIDE_CHARACTER_LITERAL;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 305 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.wchar_val = hexToWChar(yytext + 2);
  return WIDE_CHARACTER_LITERAL;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 311 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.wchar_val = escapeToWChar(yytext + 2);
  return WIDE_CHARACTER_LITERAL;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 317 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  // Only deal with floats in INITIAL state, so version pragmas don't
  // get interpreted as floats.
  yylval.float_literal_val = idl_strtod(yytext);
  return FLOATING_PT_LITERAL;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 324 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.float_literal_val = idl_strtod(yytext);
  return FLOATING_PT_LITERAL;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 329 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.float_literal_val = idl_strtod(yytext);
  return FLOATING_PT_LITERAL;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 334 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.string_val = escapedStringToString(yytext + 1);
  return STRING_LITERAL;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 340 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.wstring_val = escapedStringToWString(yytext + 2);
  return WIDE_STRING_LITERAL;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 346 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.fixed_val = new IDL_Fixed(yytext, currentFile, yylineno);
  return FIXED_PT_LITERAL;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 351 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.fixed_val = new IDL_Fixed(yytext, currentFile, yylineno);
  return FIXED_PT_LITERAL;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 356 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.fixed_val = new IDL_Fixed(yytext, currentFile, yylineno);
  return FIXED_PT_LITERAL;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 361 "../../../../../src/tool/omniidl/cxx/idl.ll"
{ Comment::add(yytext, currentFile, yylineno-1); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 363 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  Comment::add(yytext, currentFile, yylineno);
  BEGIN(comment);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 368 "../../../../../src/tool/omniidl/cxx/idl.ll"
{ Comment::append(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 369 "../../../../../src/tool/omniidl/cxx/idl.ll"
{ Comment::append(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 370 "../../../../../src/tool/omniidl/cxx/idl.ll"
{ Comment::append(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 371 "../../../../../src/tool/omniidl/cxx/idl.ll"
{ Comment::append(yytext); BEGIN(INITIAL); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 373 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  BEGIN(omni_pragma);
  return OMNI_PRAGMA;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 378 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  BEGIN(INITIAL);
  return END_PRAGMA;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 383 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.string_val = idl_strdup(yytext);
  return UNKNOWN_PRAGMA_BODY;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 387 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.string_val = idl_strdup(yytext);
  return UNKNOWN_PRAGMA_BODY;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 393 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  BEGIN(known_pragma);
  return PRAGMA_PREFIX;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 398 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  BEGIN(known_pragma);
  return PRAGMA_ID;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 403 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  BEGIN(known_pragma);
  return PRAGMA_VERSION;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 408 "../../../../../src/tool/omniidl/cxx/idl.ll"
{ /* Eat spaces and tabs */ }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 410 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  BEGIN(unknown_pragma);
  return PRAGMA;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 415 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  yylval.string_val = idl_strdup(yytext);
  return UNKNOWN_PRAGMA_BODY;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 420 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  /* Continue line if it ends with \ */
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 424 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  BEGIN(INITIAL);
  return END_PRAGMA;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 429 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  parseLineDirective(yytext);
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 433 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  parseLineDirective(yytext);
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 437 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  parseLineDirective(yytext);
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 441 "../../../../../src/tool/omniidl/cxx/idl.ll"
{ /* Eat white space */ }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 443 "../../../../../src/tool/omniidl/cxx/idl.ll"
{
  return yytext[0];
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 447 "../../../../../src/tool/omniidl/cxx/idl.ll"
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment):
			case YY_STATE_EOF(known_pragma):
			case YY_STATE_EOF(unknown_pragma):
			case YY_STATE_EOF(omni_pragma):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 491 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 491 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 490);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 447 "../../../../../src/tool/omniidl/cxx/idl.ll"


char octalToChar(char* s) {
  unsigned long ret = strtoul(s+1, 0, 8);

  if (ret > 255) {
    IdlError(currentFile, yylineno, "Octal character value '%s' too big", s);
  }

  return ret;
}

char hexToChar(char* s)  {
  unsigned long ret = strtoul(s+2, 0, 16);

  return ret;
}

char escapeToChar(char* s) {
  switch (s[1]) {
  case 'n':  return '\n';
  case 't':  return '\t';
  case 'v':  return '\v';
  case 'b':  return '\b';
  case 'r':  return '\r';
  case 'f':  return '\f';
  case 'a':  return '\a';
  case '\\': return '\\';
  case '?':  return '?';
  case '\'': return '\'';
  case '\"': return '\"';
  }
  IdlWarning(currentFile, yylineno,
	     "Behaviour for escape sequence '%s' is undefined by IDL; "
	     "using '%c'", s, s[1]);
  return s[1];
}

IDL_UShort octalToWChar(char* s) {
  unsigned long ret = strtoul(s+1, 0, 8);

  if (ret > 255) { // This really is meant to be 255
    IdlError(currentFile, yylineno, "Octal character value '%s' too big", s);
  }

  return ret;
}

IDL_UShort hexToWChar(char* s) {
  unsigned long ret = strtoul(s+2, 0, 16);

  return ret;
}

IDL_UShort escapeToWChar(char* s) {
  switch (s[1]) {
  case 'n':  return '\n';
  case 't':  return '\t';
  case 'v':  return '\v';
  case 'b':  return '\b';
  case 'r':  return '\r';
  case 'f':  return '\f';
  case 'a':  return '\a';
  case '\\': return '\\';
  case '?':  return '?';
  case '\'': return '\'';
  case '\"': return '\"';
  }
  IdlWarning(currentFile, yylineno,
	     "Behaviour for escape sequence '%s' is undefined by IDL; "
	     "using '%c'.", s, s[1]);
  return s[1];
}

char* escapedStringToString(char* s) {
  int   len = strlen(s);
  char* ret = new char[len+1];
  char  tmp[8];

  int from, to, i;

  for (from=0, to=0; from < len; from++, to++) {

    if (s[from] == '\\') {
      tmp[0] = s[from++];

      if ('0' <= s[from] && s[from] <= '7') {
	// Octal
	for (i=1;
	     i < 4 && from < len && '0' <= s[from] && s[from] <= '7';
	     from++, i++) tmp[i] = s[from];

	tmp[i]  = '\0';
	ret[to] = octalToChar(tmp);
	from--;
      }
      else if (s[from] == 'x') {
	// Hex
	tmp[1] = s[from++];
	for (i=2; i < 4 && from < len && isxdigit(s[from]); from++, i++)
	  tmp[i] = s[from];

	tmp[i]  = '\0';
	ret[to] = hexToChar(tmp);
	from--;
      }
      else if (s[from] == 'u') {
	// Wide hex not allowed
	IdlError(currentFile, yylineno,
		 "\\u may only be used in wide characters and strings");
	ret[to] = '!';
      }
      else {
	tmp[1]  = s[from];
	tmp[2]  = '\0';
	ret[to] = escapeToChar(tmp);
      }
      if (ret[to] == '\0') {
	IdlError(currentFile, yylineno, "String cannot contain \\0");
	ret[to] = '!';
      }
    }
    else ret[to] = s[from];
  }
  ret[to] = '\0';
  return ret;
}

IDL_UShort* escapedStringToWString(char* s) {
  int         len = strlen(s);
  IDL_UShort* ret = new IDL_UShort[len+1];
  char        tmp[8];

  int from, to, i;

  for (from=0, to=0; from < len; from++, to++) {

    if (s[from] == '\\') {
      tmp[0] = s[from++];

      if ('0' <= s[from] && s[from] <= '7') {
	// Octal
	for (i=1;
	     i < 4 && from < len && '0' <= s[from] && s[from] <= '7';
	     from++, i++) tmp[i] = s[from];

	tmp[i]  = '\0';
	ret[to] = octalToWChar(tmp);
	from--;
      }
      else if (s[from] == 'x') {
	// Hex
	tmp[1] = s[from++];
	for (i=2; i < 4 && from < len && isxdigit(s[from]); from++, i++)
	  tmp[i] = s[from];

	tmp[i]  = '\0';
	ret[to] = hexToWChar(tmp);
	from--;
      }
      else if (s[from] == 'u') {
	// Wide hex
	tmp[1] = s[from++];
	for (i=2; i < 6 && from < len && isxdigit(s[from]); from++, i++)
	  tmp[i] = s[from];

	tmp[i]  = '\0';
	ret[to] = hexToWChar(tmp);
	from--;
      }
      else {
	tmp[1]  = s[from];
	tmp[2]  = '\0';
	ret[to] = escapeToWChar(tmp);
      }
      if (ret[to] == 0) {
	IdlError(currentFile, yylineno,
		 "Wide string cannot contain wide character zero");
	ret[to] = '!';
      }
    }
    else
      ret[to] = s[from];
  }
  ret[to] = 0;
  return ret;
}

void parseLineDirective(char* s) {
  char* file    = new char[strlen(s) + 1];
  long int line = 0, mode = 0;
  int cnt       = sscanf(s, "# %ld \"%[^\"]\" %ld", &line, file, &mode);

  assert(cnt >= 1);

  if (cnt > 1) {
    if (cnt == 3) {
      if (mode == 1) {
	// New #included file
	++nestDepth;
	mainFile = 0;
	Prefix::newFile();
      }
      else if (mode == 2) {
	// Return from #include
	if (--nestDepth == 0) mainFile = 1;
	Prefix::endFile();
      }
    }
    delete [] currentFile;
    // cccp escapes \ characters, so use the normal string parser
    currentFile = escapedStringToString(file);
    delete [] file;
    if (mainFile)
      AST::tree()->setFile(currentFile);
  }
  yylineno = line;
}
#ifdef __VMS
// Some versions of DEC C++ for OpenVMS set the module name used by the
// librarian based on the last #line encountered.
#line 2946 "lex_yy.cc"
#endif
