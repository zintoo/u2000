# Python stubs generated by omniidl from topologicalLink.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "globaldefs.idl"
import globaldefs_idl
_0_globaldefs = omniORB.openModule("globaldefs")
_0_globaldefs__POA = omniORB.openModule("globaldefs__POA")
# #include "transmissionParameters.idl"
import transmissionParameters_idl
_0_transmissionParameters = omniORB.openModule("transmissionParameters")
_0_transmissionParameters__POA = omniORB.openModule("transmissionParameters__POA")

#
# Start of module "topologicalLink"
#
__name__ = "topologicalLink"
_0_topologicalLink = omniORB.openModule("topologicalLink", r"topologicalLink.idl")
_0_topologicalLink__POA = omniORB.openModule("topologicalLink__POA", r"topologicalLink.idl")


# struct TopologicalLink_T
_0_topologicalLink.TopologicalLink_T = omniORB.newEmptyClass()
class TopologicalLink_T (omniORB.StructBase):
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/topologicalLink/TopologicalLink_T:1.0"

    def __init__(self, name, userLabel, nativeEMSName, owner, direction, rate, aEndTP, zEndTP, additionalInfo):
        self.name = name
        self.userLabel = userLabel
        self.nativeEMSName = nativeEMSName
        self.owner = owner
        self.direction = direction
        self.rate = rate
        self.aEndTP = aEndTP
        self.zEndTP = zEndTP
        self.additionalInfo = additionalInfo

_0_topologicalLink.TopologicalLink_T = TopologicalLink_T
_0_topologicalLink._d_TopologicalLink_T  = (omniORB.tcInternal.tv_struct, TopologicalLink_T, TopologicalLink_T._NP_RepositoryId, "TopologicalLink_T", "name", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], "userLabel", (omniORB.tcInternal.tv_string,0), "nativeEMSName", (omniORB.tcInternal.tv_string,0), "owner", (omniORB.tcInternal.tv_string,0), "direction", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/ConnectionDirection_T:1.0"], "rate", omniORB.typeMapping["IDL:mtnm.tmforum.org/transmissionParameters/LayerRate_T:1.0"], "aEndTP", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], "zEndTP", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], "additionalInfo", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NVSList_T:1.0"])
_0_topologicalLink._tc_TopologicalLink_T = omniORB.tcInternal.createTypeCode(_0_topologicalLink._d_TopologicalLink_T)
omniORB.registerType(TopologicalLink_T._NP_RepositoryId, _0_topologicalLink._d_TopologicalLink_T, _0_topologicalLink._tc_TopologicalLink_T)
del TopologicalLink_T

# typedef ... TopologicalLinkList_T
class TopologicalLinkList_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/topologicalLink/TopologicalLinkList_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_topologicalLink.TopologicalLinkList_T = TopologicalLinkList_T
_0_topologicalLink._d_TopologicalLinkList_T  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/topologicalLink/TopologicalLink_T:1.0"], 0)
_0_topologicalLink._ad_TopologicalLinkList_T = (omniORB.tcInternal.tv_alias, TopologicalLinkList_T._NP_RepositoryId, "TopologicalLinkList_T", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/topologicalLink/TopologicalLink_T:1.0"], 0))
_0_topologicalLink._tc_TopologicalLinkList_T = omniORB.tcInternal.createTypeCode(_0_topologicalLink._ad_TopologicalLinkList_T)
omniORB.registerType(TopologicalLinkList_T._NP_RepositoryId, _0_topologicalLink._ad_TopologicalLinkList_T, _0_topologicalLink._tc_TopologicalLinkList_T)
del TopologicalLinkList_T

# interface TopologicalLinkIterator_I
_0_topologicalLink._d_TopologicalLinkIterator_I = (omniORB.tcInternal.tv_objref, "IDL:mtnm.tmforum.org/topologicalLink/TopologicalLinkIterator_I:1.0", "TopologicalLinkIterator_I")
omniORB.typeMapping["IDL:mtnm.tmforum.org/topologicalLink/TopologicalLinkIterator_I:1.0"] = _0_topologicalLink._d_TopologicalLinkIterator_I
_0_topologicalLink.TopologicalLinkIterator_I = omniORB.newEmptyClass()
class TopologicalLinkIterator_I :
    _NP_RepositoryId = _0_topologicalLink._d_TopologicalLinkIterator_I[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_topologicalLink.TopologicalLinkIterator_I = TopologicalLinkIterator_I
_0_topologicalLink._tc_TopologicalLinkIterator_I = omniORB.tcInternal.createTypeCode(_0_topologicalLink._d_TopologicalLinkIterator_I)
omniORB.registerType(TopologicalLinkIterator_I._NP_RepositoryId, _0_topologicalLink._d_TopologicalLinkIterator_I, _0_topologicalLink._tc_TopologicalLinkIterator_I)

# TopologicalLinkIterator_I operations and attributes
TopologicalLinkIterator_I._d_next_n = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:mtnm.tmforum.org/topologicalLink/TopologicalLinkList_T:1.0"]), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
TopologicalLinkIterator_I._d_getLength = ((), (omniORB.tcInternal.tv_ulong, ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
TopologicalLinkIterator_I._d_destroy = ((), (), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})

# TopologicalLinkIterator_I object reference
class _objref_TopologicalLinkIterator_I (CORBA.Object):
    _NP_RepositoryId = TopologicalLinkIterator_I._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def next_n(self, *args):
        return _omnipy.invoke(self, "next_n", _0_topologicalLink.TopologicalLinkIterator_I._d_next_n, args)

    def getLength(self, *args):
        return _omnipy.invoke(self, "getLength", _0_topologicalLink.TopologicalLinkIterator_I._d_getLength, args)

    def destroy(self, *args):
        return _omnipy.invoke(self, "destroy", _0_topologicalLink.TopologicalLinkIterator_I._d_destroy, args)

    __methods__ = ["next_n", "getLength", "destroy"] + CORBA.Object.__methods__

omniORB.registerObjref(TopologicalLinkIterator_I._NP_RepositoryId, _objref_TopologicalLinkIterator_I)
_0_topologicalLink._objref_TopologicalLinkIterator_I = _objref_TopologicalLinkIterator_I
del TopologicalLinkIterator_I, _objref_TopologicalLinkIterator_I

# TopologicalLinkIterator_I skeleton
__name__ = "topologicalLink__POA"
class TopologicalLinkIterator_I (PortableServer.Servant):
    _NP_RepositoryId = _0_topologicalLink.TopologicalLinkIterator_I._NP_RepositoryId


    _omni_op_d = {"next_n": _0_topologicalLink.TopologicalLinkIterator_I._d_next_n, "getLength": _0_topologicalLink.TopologicalLinkIterator_I._d_getLength, "destroy": _0_topologicalLink.TopologicalLinkIterator_I._d_destroy}

TopologicalLinkIterator_I._omni_skeleton = TopologicalLinkIterator_I
_0_topologicalLink__POA.TopologicalLinkIterator_I = TopologicalLinkIterator_I
omniORB.registerSkeleton(TopologicalLinkIterator_I._NP_RepositoryId, TopologicalLinkIterator_I)
del TopologicalLinkIterator_I
__name__ = "topologicalLink"

#
# End of module "topologicalLink"
#
__name__ = "topologicalLink_idl"

_exported_modules = ( "topologicalLink", )

# The end.
